/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/user/cyberimmune-systems-autonomous-delivery-drone-with-kos-contest/modules/DroneCAN/DSDL/dronecan/protocol/342.Stats.uavcan
 */

#ifndef DRONECAN_PROTOCOL_STATS_HPP_INCLUDED
#define DRONECAN_PROTOCOL_STATS_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# monitor the status of the DroneCAN Protocol decoder on the node
#

uint32 tx_frames                    # Number of transmitted frames
uint16 tx_errors                    # Number of errors during transmission
uint32 rx_frames                    # Number of received frames
uint16 rx_error_oom                 # Number of out-of-memory errors
uint16 rx_error_internal            # Number of internal errors
uint16 rx_error_missed_start        # Number of missed start bits
uint16 rx_error_wrong_toggle        # Number of wrong toggle bits
uint16 rx_error_short_frame         # Number of frames that were too short
uint16 rx_error_bad_crc             # Number of frames with bad CRC
uint16 rx_ignored_wrong_address     # Number of frames with wrong address
uint16 rx_ignored_not_wanted        # Number of frames that were not wanted
uint16 rx_ignored_unexpected_tid    # Number of frames with unexpected TID
******************************************************************************/

/********************* DSDL signature source definition ***********************
dronecan.protocol.Stats
saturated uint32 tx_frames
saturated uint16 tx_errors
saturated uint32 rx_frames
saturated uint16 rx_error_oom
saturated uint16 rx_error_internal
saturated uint16 rx_error_missed_start
saturated uint16 rx_error_wrong_toggle
saturated uint16 rx_error_short_frame
saturated uint16 rx_error_bad_crc
saturated uint16 rx_ignored_wrong_address
saturated uint16 rx_ignored_not_wanted
saturated uint16 rx_ignored_unexpected_tid
******************************************************************************/

#undef tx_frames
#undef tx_errors
#undef rx_frames
#undef rx_error_oom
#undef rx_error_internal
#undef rx_error_missed_start
#undef rx_error_wrong_toggle
#undef rx_error_short_frame
#undef rx_error_bad_crc
#undef rx_ignored_wrong_address
#undef rx_ignored_not_wanted
#undef rx_ignored_unexpected_tid

namespace dronecan
{
namespace protocol
{

template <int _tmpl>
struct UAVCAN_EXPORT Stats_
{
    typedef const Stats_<_tmpl>& ParameterType;
    typedef Stats_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > tx_frames;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > tx_errors;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > rx_frames;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > rx_error_oom;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > rx_error_internal;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > rx_error_missed_start;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > rx_error_wrong_toggle;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > rx_error_short_frame;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > rx_error_bad_crc;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > rx_ignored_wrong_address;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > rx_ignored_not_wanted;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > rx_ignored_unexpected_tid;
    };

    enum
    {
        MinBitLen
            = FieldTypes::tx_frames::MinBitLen
            + FieldTypes::tx_errors::MinBitLen
            + FieldTypes::rx_frames::MinBitLen
            + FieldTypes::rx_error_oom::MinBitLen
            + FieldTypes::rx_error_internal::MinBitLen
            + FieldTypes::rx_error_missed_start::MinBitLen
            + FieldTypes::rx_error_wrong_toggle::MinBitLen
            + FieldTypes::rx_error_short_frame::MinBitLen
            + FieldTypes::rx_error_bad_crc::MinBitLen
            + FieldTypes::rx_ignored_wrong_address::MinBitLen
            + FieldTypes::rx_ignored_not_wanted::MinBitLen
            + FieldTypes::rx_ignored_unexpected_tid::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::tx_frames::MaxBitLen
            + FieldTypes::tx_errors::MaxBitLen
            + FieldTypes::rx_frames::MaxBitLen
            + FieldTypes::rx_error_oom::MaxBitLen
            + FieldTypes::rx_error_internal::MaxBitLen
            + FieldTypes::rx_error_missed_start::MaxBitLen
            + FieldTypes::rx_error_wrong_toggle::MaxBitLen
            + FieldTypes::rx_error_short_frame::MaxBitLen
            + FieldTypes::rx_error_bad_crc::MaxBitLen
            + FieldTypes::rx_ignored_wrong_address::MaxBitLen
            + FieldTypes::rx_ignored_not_wanted::MaxBitLen
            + FieldTypes::rx_ignored_unexpected_tid::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::tx_frames >::Type tx_frames;
    typename ::uavcan::StorageType< typename FieldTypes::tx_errors >::Type tx_errors;
    typename ::uavcan::StorageType< typename FieldTypes::rx_frames >::Type rx_frames;
    typename ::uavcan::StorageType< typename FieldTypes::rx_error_oom >::Type rx_error_oom;
    typename ::uavcan::StorageType< typename FieldTypes::rx_error_internal >::Type rx_error_internal;
    typename ::uavcan::StorageType< typename FieldTypes::rx_error_missed_start >::Type rx_error_missed_start;
    typename ::uavcan::StorageType< typename FieldTypes::rx_error_wrong_toggle >::Type rx_error_wrong_toggle;
    typename ::uavcan::StorageType< typename FieldTypes::rx_error_short_frame >::Type rx_error_short_frame;
    typename ::uavcan::StorageType< typename FieldTypes::rx_error_bad_crc >::Type rx_error_bad_crc;
    typename ::uavcan::StorageType< typename FieldTypes::rx_ignored_wrong_address >::Type rx_ignored_wrong_address;
    typename ::uavcan::StorageType< typename FieldTypes::rx_ignored_not_wanted >::Type rx_ignored_not_wanted;
    typename ::uavcan::StorageType< typename FieldTypes::rx_ignored_unexpected_tid >::Type rx_ignored_unexpected_tid;

    Stats_()
        : tx_frames()
        , tx_errors()
        , rx_frames()
        , rx_error_oom()
        , rx_error_internal()
        , rx_error_missed_start()
        , rx_error_wrong_toggle()
        , rx_error_short_frame()
        , rx_error_bad_crc()
        , rx_ignored_wrong_address()
        , rx_ignored_not_wanted()
        , rx_ignored_unexpected_tid()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<224 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 342 };

    static const char* getDataTypeFullName()
    {
        return "dronecan.protocol.Stats";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool Stats_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        tx_frames == rhs.tx_frames &&
        tx_errors == rhs.tx_errors &&
        rx_frames == rhs.rx_frames &&
        rx_error_oom == rhs.rx_error_oom &&
        rx_error_internal == rhs.rx_error_internal &&
        rx_error_missed_start == rhs.rx_error_missed_start &&
        rx_error_wrong_toggle == rhs.rx_error_wrong_toggle &&
        rx_error_short_frame == rhs.rx_error_short_frame &&
        rx_error_bad_crc == rhs.rx_error_bad_crc &&
        rx_ignored_wrong_address == rhs.rx_ignored_wrong_address &&
        rx_ignored_not_wanted == rhs.rx_ignored_not_wanted &&
        rx_ignored_unexpected_tid == rhs.rx_ignored_unexpected_tid;
}

template <int _tmpl>
bool Stats_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(tx_frames, rhs.tx_frames) &&
        ::uavcan::areClose(tx_errors, rhs.tx_errors) &&
        ::uavcan::areClose(rx_frames, rhs.rx_frames) &&
        ::uavcan::areClose(rx_error_oom, rhs.rx_error_oom) &&
        ::uavcan::areClose(rx_error_internal, rhs.rx_error_internal) &&
        ::uavcan::areClose(rx_error_missed_start, rhs.rx_error_missed_start) &&
        ::uavcan::areClose(rx_error_wrong_toggle, rhs.rx_error_wrong_toggle) &&
        ::uavcan::areClose(rx_error_short_frame, rhs.rx_error_short_frame) &&
        ::uavcan::areClose(rx_error_bad_crc, rhs.rx_error_bad_crc) &&
        ::uavcan::areClose(rx_ignored_wrong_address, rhs.rx_ignored_wrong_address) &&
        ::uavcan::areClose(rx_ignored_not_wanted, rhs.rx_ignored_not_wanted) &&
        ::uavcan::areClose(rx_ignored_unexpected_tid, rhs.rx_ignored_unexpected_tid);
}

template <int _tmpl>
int Stats_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::tx_frames::encode(self.tx_frames, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::tx_errors::encode(self.tx_errors, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_frames::encode(self.rx_frames, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_error_oom::encode(self.rx_error_oom, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_error_internal::encode(self.rx_error_internal, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_error_missed_start::encode(self.rx_error_missed_start, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_error_wrong_toggle::encode(self.rx_error_wrong_toggle, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_error_short_frame::encode(self.rx_error_short_frame, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_error_bad_crc::encode(self.rx_error_bad_crc, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_ignored_wrong_address::encode(self.rx_ignored_wrong_address, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_ignored_not_wanted::encode(self.rx_ignored_not_wanted, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_ignored_unexpected_tid::encode(self.rx_ignored_unexpected_tid, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int Stats_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::tx_frames::decode(self.tx_frames, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::tx_errors::decode(self.tx_errors, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_frames::decode(self.rx_frames, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_error_oom::decode(self.rx_error_oom, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_error_internal::decode(self.rx_error_internal, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_error_missed_start::decode(self.rx_error_missed_start, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_error_wrong_toggle::decode(self.rx_error_wrong_toggle, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_error_short_frame::decode(self.rx_error_short_frame, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_error_bad_crc::decode(self.rx_error_bad_crc, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_ignored_wrong_address::decode(self.rx_ignored_wrong_address, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_ignored_not_wanted::decode(self.rx_ignored_not_wanted, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_ignored_unexpected_tid::decode(self.rx_ignored_unexpected_tid, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature Stats_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x763AE3B8A986F8D1ULL);

    FieldTypes::tx_frames::extendDataTypeSignature(signature);
    FieldTypes::tx_errors::extendDataTypeSignature(signature);
    FieldTypes::rx_frames::extendDataTypeSignature(signature);
    FieldTypes::rx_error_oom::extendDataTypeSignature(signature);
    FieldTypes::rx_error_internal::extendDataTypeSignature(signature);
    FieldTypes::rx_error_missed_start::extendDataTypeSignature(signature);
    FieldTypes::rx_error_wrong_toggle::extendDataTypeSignature(signature);
    FieldTypes::rx_error_short_frame::extendDataTypeSignature(signature);
    FieldTypes::rx_error_bad_crc::extendDataTypeSignature(signature);
    FieldTypes::rx_ignored_wrong_address::extendDataTypeSignature(signature);
    FieldTypes::rx_ignored_not_wanted::extendDataTypeSignature(signature);
    FieldTypes::rx_ignored_unexpected_tid::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef Stats_<0> Stats;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::dronecan::protocol::Stats > _uavcan_gdtr_registrator_Stats;

}

} // Namespace protocol
} // Namespace dronecan

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::dronecan::protocol::Stats >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::dronecan::protocol::Stats::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::dronecan::protocol::Stats >::stream(Stream& s, ::dronecan::protocol::Stats::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "tx_frames: ";
    YamlStreamer< ::dronecan::protocol::Stats::FieldTypes::tx_frames >::stream(s, obj.tx_frames, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "tx_errors: ";
    YamlStreamer< ::dronecan::protocol::Stats::FieldTypes::tx_errors >::stream(s, obj.tx_errors, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rx_frames: ";
    YamlStreamer< ::dronecan::protocol::Stats::FieldTypes::rx_frames >::stream(s, obj.rx_frames, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rx_error_oom: ";
    YamlStreamer< ::dronecan::protocol::Stats::FieldTypes::rx_error_oom >::stream(s, obj.rx_error_oom, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rx_error_internal: ";
    YamlStreamer< ::dronecan::protocol::Stats::FieldTypes::rx_error_internal >::stream(s, obj.rx_error_internal, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rx_error_missed_start: ";
    YamlStreamer< ::dronecan::protocol::Stats::FieldTypes::rx_error_missed_start >::stream(s, obj.rx_error_missed_start, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rx_error_wrong_toggle: ";
    YamlStreamer< ::dronecan::protocol::Stats::FieldTypes::rx_error_wrong_toggle >::stream(s, obj.rx_error_wrong_toggle, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rx_error_short_frame: ";
    YamlStreamer< ::dronecan::protocol::Stats::FieldTypes::rx_error_short_frame >::stream(s, obj.rx_error_short_frame, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rx_error_bad_crc: ";
    YamlStreamer< ::dronecan::protocol::Stats::FieldTypes::rx_error_bad_crc >::stream(s, obj.rx_error_bad_crc, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rx_ignored_wrong_address: ";
    YamlStreamer< ::dronecan::protocol::Stats::FieldTypes::rx_ignored_wrong_address >::stream(s, obj.rx_ignored_wrong_address, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rx_ignored_not_wanted: ";
    YamlStreamer< ::dronecan::protocol::Stats::FieldTypes::rx_ignored_not_wanted >::stream(s, obj.rx_ignored_not_wanted, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rx_ignored_unexpected_tid: ";
    YamlStreamer< ::dronecan::protocol::Stats::FieldTypes::rx_ignored_unexpected_tid >::stream(s, obj.rx_ignored_unexpected_tid, level + 1);
}

}

namespace dronecan
{
namespace protocol
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::dronecan::protocol::Stats::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::dronecan::protocol::Stats >::stream(s, obj, 0);
    return s;
}

} // Namespace protocol
} // Namespace dronecan

#endif // DRONECAN_PROTOCOL_STATS_HPP_INCLUDED