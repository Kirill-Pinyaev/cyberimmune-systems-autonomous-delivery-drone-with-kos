/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/user/cyberimmune-systems-autonomous-delivery-drone-with-kos-contest/modules/DroneCAN/DSDL/dronecan/protocol/343.CanStats.uavcan
 */

#ifndef DRONECAN_PROTOCOL_CANSTATS_HPP_INCLUDED
#define DRONECAN_PROTOCOL_CANSTATS_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Monitor the stats of physical layer on the node
#

uint8 interface         # interface number
uint32 tx_requests      # number of tx requests
uint16 tx_rejected      # number of tx requests rejected
uint16 tx_overflow      # number of tx requests overflow
uint16 tx_success       # number of tx requests success
uint16 tx_timedout      # number of tx requests timedout
uint16 tx_abort         # number of tx requests aborted
uint32 rx_received      # number of rx received
uint16 rx_overflow      # number of rx overflow
uint16 rx_errors        # number of rx errors
uint16 busoff_errors    # number of busoff errors
******************************************************************************/

/********************* DSDL signature source definition ***********************
dronecan.protocol.CanStats
saturated uint8 interface
saturated uint32 tx_requests
saturated uint16 tx_rejected
saturated uint16 tx_overflow
saturated uint16 tx_success
saturated uint16 tx_timedout
saturated uint16 tx_abort
saturated uint32 rx_received
saturated uint16 rx_overflow
saturated uint16 rx_errors
saturated uint16 busoff_errors
******************************************************************************/

#undef interface
#undef tx_requests
#undef tx_rejected
#undef tx_overflow
#undef tx_success
#undef tx_timedout
#undef tx_abort
#undef rx_received
#undef rx_overflow
#undef rx_errors
#undef busoff_errors

namespace dronecan
{
namespace protocol
{

template <int _tmpl>
struct UAVCAN_EXPORT CanStats_
{
    typedef const CanStats_<_tmpl>& ParameterType;
    typedef CanStats_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > interface;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > tx_requests;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > tx_rejected;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > tx_overflow;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > tx_success;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > tx_timedout;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > tx_abort;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > rx_received;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > rx_overflow;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > rx_errors;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > busoff_errors;
    };

    enum
    {
        MinBitLen
            = FieldTypes::interface::MinBitLen
            + FieldTypes::tx_requests::MinBitLen
            + FieldTypes::tx_rejected::MinBitLen
            + FieldTypes::tx_overflow::MinBitLen
            + FieldTypes::tx_success::MinBitLen
            + FieldTypes::tx_timedout::MinBitLen
            + FieldTypes::tx_abort::MinBitLen
            + FieldTypes::rx_received::MinBitLen
            + FieldTypes::rx_overflow::MinBitLen
            + FieldTypes::rx_errors::MinBitLen
            + FieldTypes::busoff_errors::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::interface::MaxBitLen
            + FieldTypes::tx_requests::MaxBitLen
            + FieldTypes::tx_rejected::MaxBitLen
            + FieldTypes::tx_overflow::MaxBitLen
            + FieldTypes::tx_success::MaxBitLen
            + FieldTypes::tx_timedout::MaxBitLen
            + FieldTypes::tx_abort::MaxBitLen
            + FieldTypes::rx_received::MaxBitLen
            + FieldTypes::rx_overflow::MaxBitLen
            + FieldTypes::rx_errors::MaxBitLen
            + FieldTypes::busoff_errors::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::interface >::Type interface;
    typename ::uavcan::StorageType< typename FieldTypes::tx_requests >::Type tx_requests;
    typename ::uavcan::StorageType< typename FieldTypes::tx_rejected >::Type tx_rejected;
    typename ::uavcan::StorageType< typename FieldTypes::tx_overflow >::Type tx_overflow;
    typename ::uavcan::StorageType< typename FieldTypes::tx_success >::Type tx_success;
    typename ::uavcan::StorageType< typename FieldTypes::tx_timedout >::Type tx_timedout;
    typename ::uavcan::StorageType< typename FieldTypes::tx_abort >::Type tx_abort;
    typename ::uavcan::StorageType< typename FieldTypes::rx_received >::Type rx_received;
    typename ::uavcan::StorageType< typename FieldTypes::rx_overflow >::Type rx_overflow;
    typename ::uavcan::StorageType< typename FieldTypes::rx_errors >::Type rx_errors;
    typename ::uavcan::StorageType< typename FieldTypes::busoff_errors >::Type busoff_errors;

    CanStats_()
        : interface()
        , tx_requests()
        , tx_rejected()
        , tx_overflow()
        , tx_success()
        , tx_timedout()
        , tx_abort()
        , rx_received()
        , rx_overflow()
        , rx_errors()
        , busoff_errors()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<200 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 343 };

    static const char* getDataTypeFullName()
    {
        return "dronecan.protocol.CanStats";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool CanStats_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        interface == rhs.interface &&
        tx_requests == rhs.tx_requests &&
        tx_rejected == rhs.tx_rejected &&
        tx_overflow == rhs.tx_overflow &&
        tx_success == rhs.tx_success &&
        tx_timedout == rhs.tx_timedout &&
        tx_abort == rhs.tx_abort &&
        rx_received == rhs.rx_received &&
        rx_overflow == rhs.rx_overflow &&
        rx_errors == rhs.rx_errors &&
        busoff_errors == rhs.busoff_errors;
}

template <int _tmpl>
bool CanStats_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(interface, rhs.interface) &&
        ::uavcan::areClose(tx_requests, rhs.tx_requests) &&
        ::uavcan::areClose(tx_rejected, rhs.tx_rejected) &&
        ::uavcan::areClose(tx_overflow, rhs.tx_overflow) &&
        ::uavcan::areClose(tx_success, rhs.tx_success) &&
        ::uavcan::areClose(tx_timedout, rhs.tx_timedout) &&
        ::uavcan::areClose(tx_abort, rhs.tx_abort) &&
        ::uavcan::areClose(rx_received, rhs.rx_received) &&
        ::uavcan::areClose(rx_overflow, rhs.rx_overflow) &&
        ::uavcan::areClose(rx_errors, rhs.rx_errors) &&
        ::uavcan::areClose(busoff_errors, rhs.busoff_errors);
}

template <int _tmpl>
int CanStats_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::interface::encode(self.interface, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::tx_requests::encode(self.tx_requests, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::tx_rejected::encode(self.tx_rejected, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::tx_overflow::encode(self.tx_overflow, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::tx_success::encode(self.tx_success, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::tx_timedout::encode(self.tx_timedout, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::tx_abort::encode(self.tx_abort, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_received::encode(self.rx_received, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_overflow::encode(self.rx_overflow, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_errors::encode(self.rx_errors, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::busoff_errors::encode(self.busoff_errors, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int CanStats_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::interface::decode(self.interface, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::tx_requests::decode(self.tx_requests, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::tx_rejected::decode(self.tx_rejected, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::tx_overflow::decode(self.tx_overflow, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::tx_success::decode(self.tx_success, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::tx_timedout::decode(self.tx_timedout, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::tx_abort::decode(self.tx_abort, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_received::decode(self.rx_received, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_overflow::decode(self.rx_overflow, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rx_errors::decode(self.rx_errors, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::busoff_errors::decode(self.busoff_errors, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature CanStats_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0xCE080CAE3CA33C75ULL);

    FieldTypes::interface::extendDataTypeSignature(signature);
    FieldTypes::tx_requests::extendDataTypeSignature(signature);
    FieldTypes::tx_rejected::extendDataTypeSignature(signature);
    FieldTypes::tx_overflow::extendDataTypeSignature(signature);
    FieldTypes::tx_success::extendDataTypeSignature(signature);
    FieldTypes::tx_timedout::extendDataTypeSignature(signature);
    FieldTypes::tx_abort::extendDataTypeSignature(signature);
    FieldTypes::rx_received::extendDataTypeSignature(signature);
    FieldTypes::rx_overflow::extendDataTypeSignature(signature);
    FieldTypes::rx_errors::extendDataTypeSignature(signature);
    FieldTypes::busoff_errors::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef CanStats_<0> CanStats;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::dronecan::protocol::CanStats > _uavcan_gdtr_registrator_CanStats;

}

} // Namespace protocol
} // Namespace dronecan

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::dronecan::protocol::CanStats >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::dronecan::protocol::CanStats::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::dronecan::protocol::CanStats >::stream(Stream& s, ::dronecan::protocol::CanStats::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "interface: ";
    YamlStreamer< ::dronecan::protocol::CanStats::FieldTypes::interface >::stream(s, obj.interface, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "tx_requests: ";
    YamlStreamer< ::dronecan::protocol::CanStats::FieldTypes::tx_requests >::stream(s, obj.tx_requests, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "tx_rejected: ";
    YamlStreamer< ::dronecan::protocol::CanStats::FieldTypes::tx_rejected >::stream(s, obj.tx_rejected, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "tx_overflow: ";
    YamlStreamer< ::dronecan::protocol::CanStats::FieldTypes::tx_overflow >::stream(s, obj.tx_overflow, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "tx_success: ";
    YamlStreamer< ::dronecan::protocol::CanStats::FieldTypes::tx_success >::stream(s, obj.tx_success, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "tx_timedout: ";
    YamlStreamer< ::dronecan::protocol::CanStats::FieldTypes::tx_timedout >::stream(s, obj.tx_timedout, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "tx_abort: ";
    YamlStreamer< ::dronecan::protocol::CanStats::FieldTypes::tx_abort >::stream(s, obj.tx_abort, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rx_received: ";
    YamlStreamer< ::dronecan::protocol::CanStats::FieldTypes::rx_received >::stream(s, obj.rx_received, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rx_overflow: ";
    YamlStreamer< ::dronecan::protocol::CanStats::FieldTypes::rx_overflow >::stream(s, obj.rx_overflow, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rx_errors: ";
    YamlStreamer< ::dronecan::protocol::CanStats::FieldTypes::rx_errors >::stream(s, obj.rx_errors, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "busoff_errors: ";
    YamlStreamer< ::dronecan::protocol::CanStats::FieldTypes::busoff_errors >::stream(s, obj.busoff_errors, level + 1);
}

}

namespace dronecan
{
namespace protocol
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::dronecan::protocol::CanStats::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::dronecan::protocol::CanStats >::stream(s, obj, 0);
    return s;
}

} // Namespace protocol
} // Namespace dronecan

#endif // DRONECAN_PROTOCOL_CANSTATS_HPP_INCLUDED