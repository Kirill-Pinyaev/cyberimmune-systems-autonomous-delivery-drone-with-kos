/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/user/cyberimmune-systems-autonomous-delivery-drone-with-kos-contest/modules/DroneCAN/DSDL/com/himark/servo/2018.ServoCmd.uavcan
 */

#ifndef COM_HIMARK_SERVO_SERVOCMD_HPP_INCLUDED
#define COM_HIMARK_SERVO_SERVOCMD_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
# Himark servo commands
# it is not recommended that anyone implement this message. It is here as a placeholder
# for existing Himark servos

# signature from original file location
OVERRIDE_SIGNATURE 0x5D09E48551CE9194

uint10[<=17] cmd
******************************************************************************/

/********************* DSDL signature source definition ***********************
com.himark.servo.ServoCmd
saturated uint10[<=17] cmd
******************************************************************************/

#undef cmd

namespace com
{
namespace himark
{
namespace servo
{

template <int _tmpl>
struct UAVCAN_EXPORT ServoCmd_
{
    typedef const ServoCmd_<_tmpl>& ParameterType;
    typedef ServoCmd_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 10, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 17 > cmd;
    };

    enum
    {
        MinBitLen
            = FieldTypes::cmd::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::cmd::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::cmd >::Type cmd;

    ServoCmd_()
        : cmd()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<175 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 2018 };

    static const char* getDataTypeFullName()
    {
        return "com.himark.servo.ServoCmd";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool ServoCmd_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        cmd == rhs.cmd;
}

template <int _tmpl>
bool ServoCmd_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(cmd, rhs.cmd);
}

template <int _tmpl>
int ServoCmd_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::cmd::encode(self.cmd, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int ServoCmd_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::cmd::decode(self.cmd, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature ServoCmd_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x5D09E48551CE9194ULL);

    FieldTypes::cmd::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef ServoCmd_<0> ServoCmd;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::com::himark::servo::ServoCmd > _uavcan_gdtr_registrator_ServoCmd;

}

} // Namespace servo
} // Namespace himark
} // Namespace com

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::com::himark::servo::ServoCmd >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::com::himark::servo::ServoCmd::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::com::himark::servo::ServoCmd >::stream(Stream& s, ::com::himark::servo::ServoCmd::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "cmd: ";
    YamlStreamer< ::com::himark::servo::ServoCmd::FieldTypes::cmd >::stream(s, obj.cmd, level + 1);
}

}

namespace com
{
namespace himark
{
namespace servo
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::com::himark::servo::ServoCmd::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::com::himark::servo::ServoCmd >::stream(s, obj, 0);
    return s;
}

} // Namespace servo
} // Namespace himark
} // Namespace com

#endif // COM_HIMARK_SERVO_SERVOCMD_HPP_INCLUDED