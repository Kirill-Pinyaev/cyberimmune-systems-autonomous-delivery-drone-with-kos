/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/user/cyberimmune-systems-autonomous-delivery-drone-with-kos-contest/modules/DroneCAN/DSDL/com/himark/servo/2019.ServoInfo.uavcan
 */

#ifndef COM_HIMARK_SERVO_SERVOINFO_HPP_INCLUDED
#define COM_HIMARK_SERVO_SERVOINFO_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
# Himark servo feedback information
# it is not recommended that anyone implement this message. It is here as a placeholder
# for existing Himark servos

# signature from original file location
OVERRIDE_SIGNATURE 0xCA8F4B8F97D23B57

# servo ID from 0 to 17
uint5 servo_id

# current commanded input, range 700 to 2300, 1 LSB/us
uint12 pwm_input

# commanded position from -18000 to 18000, 1 LSB == 0.01 degrees
int16 pos_cmd

# sensed position from -18000 to 18000, 1 LSB == 0.01 degrees
int16 pos_sensor

# voltage, range 0 to 4095, 1 LSB == 0.01V
uint12 voltage

# current, range 0 to 1023, 1 LSB == 0.01A
uint10 current

# PCB temperature, range 0 to 1023, 1 LSB == 0.2 degrees Celsius, temp = pcb_tem*0.2-40
uint10 pcb_temp

# motor temperature, range 0 to 1023, 1 LSB == 0.2 degrees Celsius, temp = motor_tem*0.2-40
uint10 motor_temp

uint5 ERROR_STATUS_NO_ERROR = 0
uint5 ERROR_STATUS_DATA_ERROR = 1
uint5 error_status
******************************************************************************/

/********************* DSDL signature source definition ***********************
com.himark.servo.ServoInfo
saturated uint5 servo_id
saturated uint12 pwm_input
saturated int16 pos_cmd
saturated int16 pos_sensor
saturated uint12 voltage
saturated uint10 current
saturated uint10 pcb_temp
saturated uint10 motor_temp
saturated uint5 error_status
******************************************************************************/

#undef servo_id
#undef pwm_input
#undef pos_cmd
#undef pos_sensor
#undef voltage
#undef current
#undef pcb_temp
#undef motor_temp
#undef error_status
#undef ERROR_STATUS_NO_ERROR
#undef ERROR_STATUS_DATA_ERROR

namespace com
{
namespace himark
{
namespace servo
{

template <int _tmpl>
struct UAVCAN_EXPORT ServoInfo_
{
    typedef const ServoInfo_<_tmpl>& ParameterType;
    typedef ServoInfo_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
        typedef ::uavcan::IntegerSpec< 5, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ERROR_STATUS_NO_ERROR;
        typedef ::uavcan::IntegerSpec< 5, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ERROR_STATUS_DATA_ERROR;
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 5, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > servo_id;
        typedef ::uavcan::IntegerSpec< 12, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > pwm_input;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > pos_cmd;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > pos_sensor;
        typedef ::uavcan::IntegerSpec< 12, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > voltage;
        typedef ::uavcan::IntegerSpec< 10, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > current;
        typedef ::uavcan::IntegerSpec< 10, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > pcb_temp;
        typedef ::uavcan::IntegerSpec< 10, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > motor_temp;
        typedef ::uavcan::IntegerSpec< 5, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > error_status;
    };

    enum
    {
        MinBitLen
            = FieldTypes::servo_id::MinBitLen
            + FieldTypes::pwm_input::MinBitLen
            + FieldTypes::pos_cmd::MinBitLen
            + FieldTypes::pos_sensor::MinBitLen
            + FieldTypes::voltage::MinBitLen
            + FieldTypes::current::MinBitLen
            + FieldTypes::pcb_temp::MinBitLen
            + FieldTypes::motor_temp::MinBitLen
            + FieldTypes::error_status::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::servo_id::MaxBitLen
            + FieldTypes::pwm_input::MaxBitLen
            + FieldTypes::pos_cmd::MaxBitLen
            + FieldTypes::pos_sensor::MaxBitLen
            + FieldTypes::voltage::MaxBitLen
            + FieldTypes::current::MaxBitLen
            + FieldTypes::pcb_temp::MaxBitLen
            + FieldTypes::motor_temp::MaxBitLen
            + FieldTypes::error_status::MaxBitLen
    };

    // Constants
    static const typename ::uavcan::StorageType< typename ConstantTypes::ERROR_STATUS_NO_ERROR >::Type ERROR_STATUS_NO_ERROR; // 0
    static const typename ::uavcan::StorageType< typename ConstantTypes::ERROR_STATUS_DATA_ERROR >::Type ERROR_STATUS_DATA_ERROR; // 1

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::servo_id >::Type servo_id;
    typename ::uavcan::StorageType< typename FieldTypes::pwm_input >::Type pwm_input;
    typename ::uavcan::StorageType< typename FieldTypes::pos_cmd >::Type pos_cmd;
    typename ::uavcan::StorageType< typename FieldTypes::pos_sensor >::Type pos_sensor;
    typename ::uavcan::StorageType< typename FieldTypes::voltage >::Type voltage;
    typename ::uavcan::StorageType< typename FieldTypes::current >::Type current;
    typename ::uavcan::StorageType< typename FieldTypes::pcb_temp >::Type pcb_temp;
    typename ::uavcan::StorageType< typename FieldTypes::motor_temp >::Type motor_temp;
    typename ::uavcan::StorageType< typename FieldTypes::error_status >::Type error_status;

    ServoInfo_()
        : servo_id()
        , pwm_input()
        , pos_cmd()
        , pos_sensor()
        , voltage()
        , current()
        , pcb_temp()
        , motor_temp()
        , error_status()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<96 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 2019 };

    static const char* getDataTypeFullName()
    {
        return "com.himark.servo.ServoInfo";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool ServoInfo_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        servo_id == rhs.servo_id &&
        pwm_input == rhs.pwm_input &&
        pos_cmd == rhs.pos_cmd &&
        pos_sensor == rhs.pos_sensor &&
        voltage == rhs.voltage &&
        current == rhs.current &&
        pcb_temp == rhs.pcb_temp &&
        motor_temp == rhs.motor_temp &&
        error_status == rhs.error_status;
}

template <int _tmpl>
bool ServoInfo_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(servo_id, rhs.servo_id) &&
        ::uavcan::areClose(pwm_input, rhs.pwm_input) &&
        ::uavcan::areClose(pos_cmd, rhs.pos_cmd) &&
        ::uavcan::areClose(pos_sensor, rhs.pos_sensor) &&
        ::uavcan::areClose(voltage, rhs.voltage) &&
        ::uavcan::areClose(current, rhs.current) &&
        ::uavcan::areClose(pcb_temp, rhs.pcb_temp) &&
        ::uavcan::areClose(motor_temp, rhs.motor_temp) &&
        ::uavcan::areClose(error_status, rhs.error_status);
}

template <int _tmpl>
int ServoInfo_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::servo_id::encode(self.servo_id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::pwm_input::encode(self.pwm_input, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::pos_cmd::encode(self.pos_cmd, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::pos_sensor::encode(self.pos_sensor, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::voltage::encode(self.voltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::current::encode(self.current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::pcb_temp::encode(self.pcb_temp, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::motor_temp::encode(self.motor_temp, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::error_status::encode(self.error_status, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int ServoInfo_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::servo_id::decode(self.servo_id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::pwm_input::decode(self.pwm_input, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::pos_cmd::decode(self.pos_cmd, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::pos_sensor::decode(self.pos_sensor, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::voltage::decode(self.voltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::current::decode(self.current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::pcb_temp::decode(self.pcb_temp, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::motor_temp::decode(self.motor_temp, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::error_status::decode(self.error_status, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature ServoInfo_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0xCA8F4B8F97D23B57ULL);

    FieldTypes::servo_id::extendDataTypeSignature(signature);
    FieldTypes::pwm_input::extendDataTypeSignature(signature);
    FieldTypes::pos_cmd::extendDataTypeSignature(signature);
    FieldTypes::pos_sensor::extendDataTypeSignature(signature);
    FieldTypes::voltage::extendDataTypeSignature(signature);
    FieldTypes::current::extendDataTypeSignature(signature);
    FieldTypes::pcb_temp::extendDataTypeSignature(signature);
    FieldTypes::motor_temp::extendDataTypeSignature(signature);
    FieldTypes::error_status::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

template <int _tmpl>
const typename ::uavcan::StorageType< typename ServoInfo_<_tmpl>::ConstantTypes::ERROR_STATUS_NO_ERROR >::Type
    ServoInfo_<_tmpl>::ERROR_STATUS_NO_ERROR = 0U; // 0

template <int _tmpl>
const typename ::uavcan::StorageType< typename ServoInfo_<_tmpl>::ConstantTypes::ERROR_STATUS_DATA_ERROR >::Type
    ServoInfo_<_tmpl>::ERROR_STATUS_DATA_ERROR = 1U; // 1

/*
 * Final typedef
 */
typedef ServoInfo_<0> ServoInfo;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::com::himark::servo::ServoInfo > _uavcan_gdtr_registrator_ServoInfo;

}

} // Namespace servo
} // Namespace himark
} // Namespace com

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::com::himark::servo::ServoInfo >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::com::himark::servo::ServoInfo::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::com::himark::servo::ServoInfo >::stream(Stream& s, ::com::himark::servo::ServoInfo::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "servo_id: ";
    YamlStreamer< ::com::himark::servo::ServoInfo::FieldTypes::servo_id >::stream(s, obj.servo_id, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "pwm_input: ";
    YamlStreamer< ::com::himark::servo::ServoInfo::FieldTypes::pwm_input >::stream(s, obj.pwm_input, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "pos_cmd: ";
    YamlStreamer< ::com::himark::servo::ServoInfo::FieldTypes::pos_cmd >::stream(s, obj.pos_cmd, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "pos_sensor: ";
    YamlStreamer< ::com::himark::servo::ServoInfo::FieldTypes::pos_sensor >::stream(s, obj.pos_sensor, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "voltage: ";
    YamlStreamer< ::com::himark::servo::ServoInfo::FieldTypes::voltage >::stream(s, obj.voltage, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "current: ";
    YamlStreamer< ::com::himark::servo::ServoInfo::FieldTypes::current >::stream(s, obj.current, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "pcb_temp: ";
    YamlStreamer< ::com::himark::servo::ServoInfo::FieldTypes::pcb_temp >::stream(s, obj.pcb_temp, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "motor_temp: ";
    YamlStreamer< ::com::himark::servo::ServoInfo::FieldTypes::motor_temp >::stream(s, obj.motor_temp, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "error_status: ";
    YamlStreamer< ::com::himark::servo::ServoInfo::FieldTypes::error_status >::stream(s, obj.error_status, level + 1);
}

}

namespace com
{
namespace himark
{
namespace servo
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::com::himark::servo::ServoInfo::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::com::himark::servo::ServoInfo >::stream(s, obj, 0);
    return s;
}

} // Namespace servo
} // Namespace himark
} // Namespace com

#endif // COM_HIMARK_SERVO_SERVOINFO_HPP_INCLUDED