/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/user/cyberimmune-systems-autonomous-delivery-drone-with-kos-contest/modules/DroneCAN/DSDL/com/tmotor/esc/1035.FocCtrl.uavcan
 */

#ifndef COM_TMOTOR_ESC_FOCCTRL_HPP_INCLUDED
#define COM_TMOTOR_ESC_FOCCTRL_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Generic ESC status.
#

OVERRIDE_SIGNATURE 0x598143612FBC000B

uint8 esc_index

uint8 esc_mode

uint8 esc_fdb_rate

uint8 esc_cmd

int32 esc_cmd_val
******************************************************************************/

/********************* DSDL signature source definition ***********************
com.tmotor.esc.FocCtrl
saturated uint8 esc_index
saturated uint8 esc_mode
saturated uint8 esc_fdb_rate
saturated uint8 esc_cmd
saturated int32 esc_cmd_val
******************************************************************************/

#undef esc_index
#undef esc_mode
#undef esc_fdb_rate
#undef esc_cmd
#undef esc_cmd_val

namespace com
{
namespace tmotor
{
namespace esc
{

template <int _tmpl>
struct UAVCAN_EXPORT FocCtrl_
{
    typedef const FocCtrl_<_tmpl>& ParameterType;
    typedef FocCtrl_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > esc_index;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > esc_mode;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > esc_fdb_rate;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > esc_cmd;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > esc_cmd_val;
    };

    enum
    {
        MinBitLen
            = FieldTypes::esc_index::MinBitLen
            + FieldTypes::esc_mode::MinBitLen
            + FieldTypes::esc_fdb_rate::MinBitLen
            + FieldTypes::esc_cmd::MinBitLen
            + FieldTypes::esc_cmd_val::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::esc_index::MaxBitLen
            + FieldTypes::esc_mode::MaxBitLen
            + FieldTypes::esc_fdb_rate::MaxBitLen
            + FieldTypes::esc_cmd::MaxBitLen
            + FieldTypes::esc_cmd_val::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::esc_index >::Type esc_index;
    typename ::uavcan::StorageType< typename FieldTypes::esc_mode >::Type esc_mode;
    typename ::uavcan::StorageType< typename FieldTypes::esc_fdb_rate >::Type esc_fdb_rate;
    typename ::uavcan::StorageType< typename FieldTypes::esc_cmd >::Type esc_cmd;
    typename ::uavcan::StorageType< typename FieldTypes::esc_cmd_val >::Type esc_cmd_val;

    FocCtrl_()
        : esc_index()
        , esc_mode()
        , esc_fdb_rate()
        , esc_cmd()
        , esc_cmd_val()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<64 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 1035 };

    static const char* getDataTypeFullName()
    {
        return "com.tmotor.esc.FocCtrl";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool FocCtrl_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        esc_index == rhs.esc_index &&
        esc_mode == rhs.esc_mode &&
        esc_fdb_rate == rhs.esc_fdb_rate &&
        esc_cmd == rhs.esc_cmd &&
        esc_cmd_val == rhs.esc_cmd_val;
}

template <int _tmpl>
bool FocCtrl_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(esc_index, rhs.esc_index) &&
        ::uavcan::areClose(esc_mode, rhs.esc_mode) &&
        ::uavcan::areClose(esc_fdb_rate, rhs.esc_fdb_rate) &&
        ::uavcan::areClose(esc_cmd, rhs.esc_cmd) &&
        ::uavcan::areClose(esc_cmd_val, rhs.esc_cmd_val);
}

template <int _tmpl>
int FocCtrl_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::esc_index::encode(self.esc_index, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::esc_mode::encode(self.esc_mode, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::esc_fdb_rate::encode(self.esc_fdb_rate, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::esc_cmd::encode(self.esc_cmd, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::esc_cmd_val::encode(self.esc_cmd_val, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int FocCtrl_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::esc_index::decode(self.esc_index, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::esc_mode::decode(self.esc_mode, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::esc_fdb_rate::decode(self.esc_fdb_rate, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::esc_cmd::decode(self.esc_cmd, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::esc_cmd_val::decode(self.esc_cmd_val, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature FocCtrl_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x598143612FBC000BULL);

    FieldTypes::esc_index::extendDataTypeSignature(signature);
    FieldTypes::esc_mode::extendDataTypeSignature(signature);
    FieldTypes::esc_fdb_rate::extendDataTypeSignature(signature);
    FieldTypes::esc_cmd::extendDataTypeSignature(signature);
    FieldTypes::esc_cmd_val::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef FocCtrl_<0> FocCtrl;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::com::tmotor::esc::FocCtrl > _uavcan_gdtr_registrator_FocCtrl;

}

} // Namespace esc
} // Namespace tmotor
} // Namespace com

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::com::tmotor::esc::FocCtrl >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::com::tmotor::esc::FocCtrl::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::com::tmotor::esc::FocCtrl >::stream(Stream& s, ::com::tmotor::esc::FocCtrl::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "esc_index: ";
    YamlStreamer< ::com::tmotor::esc::FocCtrl::FieldTypes::esc_index >::stream(s, obj.esc_index, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "esc_mode: ";
    YamlStreamer< ::com::tmotor::esc::FocCtrl::FieldTypes::esc_mode >::stream(s, obj.esc_mode, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "esc_fdb_rate: ";
    YamlStreamer< ::com::tmotor::esc::FocCtrl::FieldTypes::esc_fdb_rate >::stream(s, obj.esc_fdb_rate, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "esc_cmd: ";
    YamlStreamer< ::com::tmotor::esc::FocCtrl::FieldTypes::esc_cmd >::stream(s, obj.esc_cmd, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "esc_cmd_val: ";
    YamlStreamer< ::com::tmotor::esc::FocCtrl::FieldTypes::esc_cmd_val >::stream(s, obj.esc_cmd_val, level + 1);
}

}

namespace com
{
namespace tmotor
{
namespace esc
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::com::tmotor::esc::FocCtrl::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::com::tmotor::esc::FocCtrl >::stream(s, obj, 0);
    return s;
}

} // Namespace esc
} // Namespace tmotor
} // Namespace com

#endif // COM_TMOTOR_ESC_FOCCTRL_HPP_INCLUDED