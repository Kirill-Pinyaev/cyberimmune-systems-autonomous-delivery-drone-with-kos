/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/user/cyberimmune-systems-autonomous-delivery-drone-with-kos-contest/modules/DroneCAN/DSDL/com/hobbywing/esc/242.GetMajorConfig.uavcan
 */

#ifndef COM_HOBBYWING_ESC_GETMAJORCONFIG_HPP_INCLUDED
#define COM_HOBBYWING_ESC_GETMAJORCONFIG_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
OVERRIDE_SIGNATURE 0x1506774da3930bfd

uint8 option

---

bool direction
bool throttle_source
uint6 throttle_channel

uint5 led_status
uint3 led_color

uint4 MSG2_rate
uint4 MSG1_rate

uint16 positioning_angle

uint8[2] reserved
******************************************************************************/

/********************* DSDL signature source definition ***********************
com.hobbywing.esc.GetMajorConfig
saturated uint8 option
---
saturated bool direction
saturated bool throttle_source
saturated uint6 throttle_channel
saturated uint5 led_status
saturated uint3 led_color
saturated uint4 MSG2_rate
saturated uint4 MSG1_rate
saturated uint16 positioning_angle
saturated uint8[2] reserved
******************************************************************************/

#undef option
#undef direction
#undef throttle_source
#undef throttle_channel
#undef led_status
#undef led_color
#undef MSG2_rate
#undef MSG1_rate
#undef positioning_angle
#undef reserved

namespace com
{
namespace hobbywing
{
namespace esc
{

struct UAVCAN_EXPORT GetMajorConfig_
{
    template <int _tmpl>
    struct Request_
    {
        typedef const Request_<_tmpl>& ParameterType;
        typedef Request_<_tmpl>& ReferenceType;

        struct ConstantTypes
        {
        };

        struct FieldTypes
        {
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > option;
        };

        enum
        {
            MinBitLen
                = FieldTypes::option::MinBitLen
        };

        enum
        {
            MaxBitLen
                = FieldTypes::option::MaxBitLen
        };

        // Constants

        // Fields
        typename ::uavcan::StorageType< typename FieldTypes::option >::Type option;

        Request_()
            : option()
        {
            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

    #if UAVCAN_DEBUG
            /*
             * Cross-checking MaxBitLen provided by the DSDL compiler.
             * This check shall never be performed in user code because MaxBitLen value
             * actually depends on the nested types, thus it is not invariant.
             */
            ::uavcan::StaticAssert<8 == MaxBitLen>::check();
    #endif
        }

        bool operator==(ParameterType rhs) const;
        bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

        /**
         * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
         * floating point fields at any depth.
         */
        bool isClose(ParameterType rhs) const;

        static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

        static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    };

    template <int _tmpl>
    struct Response_
    {
        typedef const Response_<_tmpl>& ParameterType;
        typedef Response_<_tmpl>& ReferenceType;

        struct ConstantTypes
        {
        };

        struct FieldTypes
        {
            typedef ::uavcan::IntegerSpec< 1, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > direction;
            typedef ::uavcan::IntegerSpec< 1, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > throttle_source;
            typedef ::uavcan::IntegerSpec< 6, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > throttle_channel;
            typedef ::uavcan::IntegerSpec< 5, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > led_status;
            typedef ::uavcan::IntegerSpec< 3, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > led_color;
            typedef ::uavcan::IntegerSpec< 4, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > MSG2_rate;
            typedef ::uavcan::IntegerSpec< 4, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > MSG1_rate;
            typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > positioning_angle;
            typedef ::uavcan::Array< ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeStatic, 2 > reserved;
        };

        enum
        {
            MinBitLen
                = FieldTypes::direction::MinBitLen
                + FieldTypes::throttle_source::MinBitLen
                + FieldTypes::throttle_channel::MinBitLen
                + FieldTypes::led_status::MinBitLen
                + FieldTypes::led_color::MinBitLen
                + FieldTypes::MSG2_rate::MinBitLen
                + FieldTypes::MSG1_rate::MinBitLen
                + FieldTypes::positioning_angle::MinBitLen
                + FieldTypes::reserved::MinBitLen
        };

        enum
        {
            MaxBitLen
                = FieldTypes::direction::MaxBitLen
                + FieldTypes::throttle_source::MaxBitLen
                + FieldTypes::throttle_channel::MaxBitLen
                + FieldTypes::led_status::MaxBitLen
                + FieldTypes::led_color::MaxBitLen
                + FieldTypes::MSG2_rate::MaxBitLen
                + FieldTypes::MSG1_rate::MaxBitLen
                + FieldTypes::positioning_angle::MaxBitLen
                + FieldTypes::reserved::MaxBitLen
        };

        // Constants

        // Fields
        typename ::uavcan::StorageType< typename FieldTypes::direction >::Type direction;
        typename ::uavcan::StorageType< typename FieldTypes::throttle_source >::Type throttle_source;
        typename ::uavcan::StorageType< typename FieldTypes::throttle_channel >::Type throttle_channel;
        typename ::uavcan::StorageType< typename FieldTypes::led_status >::Type led_status;
        typename ::uavcan::StorageType< typename FieldTypes::led_color >::Type led_color;
        typename ::uavcan::StorageType< typename FieldTypes::MSG2_rate >::Type MSG2_rate;
        typename ::uavcan::StorageType< typename FieldTypes::MSG1_rate >::Type MSG1_rate;
        typename ::uavcan::StorageType< typename FieldTypes::positioning_angle >::Type positioning_angle;
        typename ::uavcan::StorageType< typename FieldTypes::reserved >::Type reserved;

        Response_()
            : direction()
            , throttle_source()
            , throttle_channel()
            , led_status()
            , led_color()
            , MSG2_rate()
            , MSG1_rate()
            , positioning_angle()
            , reserved()
        {
            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

    #if UAVCAN_DEBUG
            /*
             * Cross-checking MaxBitLen provided by the DSDL compiler.
             * This check shall never be performed in user code because MaxBitLen value
             * actually depends on the nested types, thus it is not invariant.
             */
            ::uavcan::StaticAssert<56 == MaxBitLen>::check();
    #endif
        }

        bool operator==(ParameterType rhs) const;
        bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

        /**
         * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
         * floating point fields at any depth.
         */
        bool isClose(ParameterType rhs) const;

        static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

        static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    };

    typedef Request_<0> Request;
    typedef Response_<0> Response;

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindService };
    enum { DefaultDataTypeID = 242 };

    static const char* getDataTypeFullName()
    {
        return "com.hobbywing.esc.GetMajorConfig";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

private:
    GetMajorConfig_(); // Don't create objects of this type. Use Request/Response instead.
};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool GetMajorConfig_::Request_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        option == rhs.option;
}

template <int _tmpl>
bool GetMajorConfig_::Request_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(option, rhs.option);
}

template <int _tmpl>
int GetMajorConfig_::Request_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::option::encode(self.option, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int GetMajorConfig_::Request_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::option::decode(self.option, codec,  tao_mode);
    return res;
}

template <int _tmpl>
bool GetMajorConfig_::Response_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        direction == rhs.direction &&
        throttle_source == rhs.throttle_source &&
        throttle_channel == rhs.throttle_channel &&
        led_status == rhs.led_status &&
        led_color == rhs.led_color &&
        MSG2_rate == rhs.MSG2_rate &&
        MSG1_rate == rhs.MSG1_rate &&
        positioning_angle == rhs.positioning_angle &&
        reserved == rhs.reserved;
}

template <int _tmpl>
bool GetMajorConfig_::Response_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(direction, rhs.direction) &&
        ::uavcan::areClose(throttle_source, rhs.throttle_source) &&
        ::uavcan::areClose(throttle_channel, rhs.throttle_channel) &&
        ::uavcan::areClose(led_status, rhs.led_status) &&
        ::uavcan::areClose(led_color, rhs.led_color) &&
        ::uavcan::areClose(MSG2_rate, rhs.MSG2_rate) &&
        ::uavcan::areClose(MSG1_rate, rhs.MSG1_rate) &&
        ::uavcan::areClose(positioning_angle, rhs.positioning_angle) &&
        ::uavcan::areClose(reserved, rhs.reserved);
}

template <int _tmpl>
int GetMajorConfig_::Response_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::direction::encode(self.direction, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::throttle_source::encode(self.throttle_source, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::throttle_channel::encode(self.throttle_channel, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::led_status::encode(self.led_status, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::led_color::encode(self.led_color, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::MSG2_rate::encode(self.MSG2_rate, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::MSG1_rate::encode(self.MSG1_rate, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::positioning_angle::encode(self.positioning_angle, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::reserved::encode(self.reserved, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int GetMajorConfig_::Response_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::direction::decode(self.direction, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::throttle_source::decode(self.throttle_source, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::throttle_channel::decode(self.throttle_channel, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::led_status::decode(self.led_status, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::led_color::decode(self.led_color, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::MSG2_rate::decode(self.MSG2_rate, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::MSG1_rate::decode(self.MSG1_rate, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::positioning_angle::decode(self.positioning_angle, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::reserved::decode(self.reserved, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
inline ::uavcan::DataTypeSignature GetMajorConfig_::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x1506774DA3930BFDULL);

    Request::FieldTypes::option::extendDataTypeSignature(signature);

    Response::FieldTypes::direction::extendDataTypeSignature(signature);
    Response::FieldTypes::throttle_source::extendDataTypeSignature(signature);
    Response::FieldTypes::throttle_channel::extendDataTypeSignature(signature);
    Response::FieldTypes::led_status::extendDataTypeSignature(signature);
    Response::FieldTypes::led_color::extendDataTypeSignature(signature);
    Response::FieldTypes::MSG2_rate::extendDataTypeSignature(signature);
    Response::FieldTypes::MSG1_rate::extendDataTypeSignature(signature);
    Response::FieldTypes::positioning_angle::extendDataTypeSignature(signature);
    Response::FieldTypes::reserved::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef GetMajorConfig_ GetMajorConfig;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::com::hobbywing::esc::GetMajorConfig > _uavcan_gdtr_registrator_GetMajorConfig;

}

} // Namespace esc
} // Namespace hobbywing
} // Namespace com

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::com::hobbywing::esc::GetMajorConfig::Request >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::com::hobbywing::esc::GetMajorConfig::Request::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::com::hobbywing::esc::GetMajorConfig::Request >::stream(Stream& s, ::com::hobbywing::esc::GetMajorConfig::Request::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "option: ";
    YamlStreamer< ::com::hobbywing::esc::GetMajorConfig::Request::FieldTypes::option >::stream(s, obj.option, level + 1);
}

template <>
class UAVCAN_EXPORT YamlStreamer< ::com::hobbywing::esc::GetMajorConfig::Response >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::com::hobbywing::esc::GetMajorConfig::Response::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::com::hobbywing::esc::GetMajorConfig::Response >::stream(Stream& s, ::com::hobbywing::esc::GetMajorConfig::Response::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "direction: ";
    YamlStreamer< ::com::hobbywing::esc::GetMajorConfig::Response::FieldTypes::direction >::stream(s, obj.direction, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "throttle_source: ";
    YamlStreamer< ::com::hobbywing::esc::GetMajorConfig::Response::FieldTypes::throttle_source >::stream(s, obj.throttle_source, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "throttle_channel: ";
    YamlStreamer< ::com::hobbywing::esc::GetMajorConfig::Response::FieldTypes::throttle_channel >::stream(s, obj.throttle_channel, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "led_status: ";
    YamlStreamer< ::com::hobbywing::esc::GetMajorConfig::Response::FieldTypes::led_status >::stream(s, obj.led_status, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "led_color: ";
    YamlStreamer< ::com::hobbywing::esc::GetMajorConfig::Response::FieldTypes::led_color >::stream(s, obj.led_color, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "MSG2_rate: ";
    YamlStreamer< ::com::hobbywing::esc::GetMajorConfig::Response::FieldTypes::MSG2_rate >::stream(s, obj.MSG2_rate, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "MSG1_rate: ";
    YamlStreamer< ::com::hobbywing::esc::GetMajorConfig::Response::FieldTypes::MSG1_rate >::stream(s, obj.MSG1_rate, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "positioning_angle: ";
    YamlStreamer< ::com::hobbywing::esc::GetMajorConfig::Response::FieldTypes::positioning_angle >::stream(s, obj.positioning_angle, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "reserved: ";
    YamlStreamer< ::com::hobbywing::esc::GetMajorConfig::Response::FieldTypes::reserved >::stream(s, obj.reserved, level + 1);
}

}

namespace com
{
namespace hobbywing
{
namespace esc
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::com::hobbywing::esc::GetMajorConfig::Request::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::com::hobbywing::esc::GetMajorConfig::Request >::stream(s, obj, 0);
    return s;
}

template <typename Stream>
inline Stream& operator<<(Stream& s, ::com::hobbywing::esc::GetMajorConfig::Response::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::com::hobbywing::esc::GetMajorConfig::Response >::stream(s, obj, 0);
    return s;
}

} // Namespace esc
} // Namespace hobbywing
} // Namespace com

#endif // COM_HOBBYWING_ESC_GETMAJORCONFIG_HPP_INCLUDED