/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/user/cyberimmune-systems-autonomous-delivery-drone-with-kos-contest/modules/DroneCAN/DSDL/ardupilot/equipment/power/20010.BatteryContinuous.uavcan
 */

#ifndef ARDUPILOT_EQUIPMENT_POWER_BATTERYCONTINUOUS_HPP_INCLUDED
#define ARDUPILOT_EQUIPMENT_POWER_BATTERYCONTINUOUS_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Battery data to be sent continuously
#

float16 temperature_cells       # [C]  : Pack mounted thermistor (preferably installed between cells), NAN: field not provided
float16 temperature_pcb         # [C]  : Battery PCB temperature (likely output FET(s) or current sense resistor), NAN: field not provided
float16 temperature_other       # [C]  : Application dependent, NAN: field not provided
float32 current                 # [A]  : Positive: defined as a discharge current. Negative: defined as a charging current, NAN: field not provided
float32 voltage                 # [V]  : Battery voltage
float16 state_of_charge         # [%]  : The estimated state of charge, in percent remaining (0 - 100).
uint8 slot_id                   #      : The physical location of the battery on the aircraft. 0: field not provided
float32 capacity_consumed       # [Ah] : This is either the consumption since power-on or since the battery was full, depending on the value of STATUS_FLAG_CAPACITY_RELATIVE_TO_FULL, NAN: field not provided
uint32 status_flags             #      : Fault, health, readiness, and other status indications

uint32 STATUS_FLAG_READY_TO_USE                             = 1
uint32 STATUS_FLAG_CHARGING                                 = 2
uint32 STATUS_FLAG_CELL_BALANCING                           = 4
uint32 STATUS_FLAG_FAULT_CELL_IMBALANCE                     = 8
uint32 STATUS_FLAG_AUTO_DISCHARGING                         = 16
uint32 STATUS_FLAG_REQUIRES_SERVICE                         = 32
uint32 STATUS_FLAG_BAD_BATTERY                              = 64
uint32 STATUS_FLAG_PROTECTIONS_ENABLED                      = 128
uint32 STATUS_FLAG_FAULT_PROTECTION_SYSTEM                  = 256
uint32 STATUS_FLAG_FAULT_OVER_VOLT                          = 512
uint32 STATUS_FLAG_FAULT_UNDER_VOLT                         = 1024
uint32 STATUS_FLAG_FAULT_OVER_TEMP                          = 2048
uint32 STATUS_FLAG_FAULT_UNDER_TEMP                         = 4096
uint32 STATUS_FLAG_FAULT_OVER_CURRENT                       = 8192
uint32 STATUS_FLAG_FAULT_SHORT_CIRCUIT                      = 16384
uint32 STATUS_FLAG_FAULT_INCOMPATIBLE_VOLTAGE               = 32768
uint32 STATUS_FLAG_FAULT_INCOMPATIBLE_FIRMWARE              = 65536
uint32 STATUS_FLAG_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION   = 131072
uint32 STATUS_FLAG_CAPACITY_RELATIVE_TO_FULL                = 262144
******************************************************************************/

/********************* DSDL signature source definition ***********************
ardupilot.equipment.power.BatteryContinuous
saturated float16 temperature_cells
saturated float16 temperature_pcb
saturated float16 temperature_other
saturated float32 current
saturated float32 voltage
saturated float16 state_of_charge
saturated uint8 slot_id
saturated float32 capacity_consumed
saturated uint32 status_flags
******************************************************************************/

#undef temperature_cells
#undef temperature_pcb
#undef temperature_other
#undef current
#undef voltage
#undef state_of_charge
#undef slot_id
#undef capacity_consumed
#undef status_flags
#undef STATUS_FLAG_READY_TO_USE
#undef STATUS_FLAG_CHARGING
#undef STATUS_FLAG_CELL_BALANCING
#undef STATUS_FLAG_FAULT_CELL_IMBALANCE
#undef STATUS_FLAG_AUTO_DISCHARGING
#undef STATUS_FLAG_REQUIRES_SERVICE
#undef STATUS_FLAG_BAD_BATTERY
#undef STATUS_FLAG_PROTECTIONS_ENABLED
#undef STATUS_FLAG_FAULT_PROTECTION_SYSTEM
#undef STATUS_FLAG_FAULT_OVER_VOLT
#undef STATUS_FLAG_FAULT_UNDER_VOLT
#undef STATUS_FLAG_FAULT_OVER_TEMP
#undef STATUS_FLAG_FAULT_UNDER_TEMP
#undef STATUS_FLAG_FAULT_OVER_CURRENT
#undef STATUS_FLAG_FAULT_SHORT_CIRCUIT
#undef STATUS_FLAG_FAULT_INCOMPATIBLE_VOLTAGE
#undef STATUS_FLAG_FAULT_INCOMPATIBLE_FIRMWARE
#undef STATUS_FLAG_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION
#undef STATUS_FLAG_CAPACITY_RELATIVE_TO_FULL

namespace ardupilot
{
namespace equipment
{
namespace power
{

template <int _tmpl>
struct UAVCAN_EXPORT BatteryContinuous_
{
    typedef const BatteryContinuous_<_tmpl>& ParameterType;
    typedef BatteryContinuous_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_READY_TO_USE;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_CHARGING;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_CELL_BALANCING;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_FAULT_CELL_IMBALANCE;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_AUTO_DISCHARGING;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_REQUIRES_SERVICE;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_BAD_BATTERY;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_PROTECTIONS_ENABLED;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_FAULT_PROTECTION_SYSTEM;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_FAULT_OVER_VOLT;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_FAULT_UNDER_VOLT;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_FAULT_OVER_TEMP;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_FAULT_UNDER_TEMP;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_FAULT_OVER_CURRENT;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_FAULT_SHORT_CIRCUIT;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_FAULT_INCOMPATIBLE_VOLTAGE;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_FAULT_INCOMPATIBLE_FIRMWARE;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_FLAG_CAPACITY_RELATIVE_TO_FULL;
    };

    struct FieldTypes
    {
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > temperature_cells;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > temperature_pcb;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > temperature_other;
        typedef ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate > current;
        typedef ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate > voltage;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > state_of_charge;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > slot_id;
        typedef ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate > capacity_consumed;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > status_flags;
    };

    enum
    {
        MinBitLen
            = FieldTypes::temperature_cells::MinBitLen
            + FieldTypes::temperature_pcb::MinBitLen
            + FieldTypes::temperature_other::MinBitLen
            + FieldTypes::current::MinBitLen
            + FieldTypes::voltage::MinBitLen
            + FieldTypes::state_of_charge::MinBitLen
            + FieldTypes::slot_id::MinBitLen
            + FieldTypes::capacity_consumed::MinBitLen
            + FieldTypes::status_flags::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::temperature_cells::MaxBitLen
            + FieldTypes::temperature_pcb::MaxBitLen
            + FieldTypes::temperature_other::MaxBitLen
            + FieldTypes::current::MaxBitLen
            + FieldTypes::voltage::MaxBitLen
            + FieldTypes::state_of_charge::MaxBitLen
            + FieldTypes::slot_id::MaxBitLen
            + FieldTypes::capacity_consumed::MaxBitLen
            + FieldTypes::status_flags::MaxBitLen
    };

    // Constants
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_READY_TO_USE >::Type STATUS_FLAG_READY_TO_USE; // 1
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_CHARGING >::Type STATUS_FLAG_CHARGING; // 2
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_CELL_BALANCING >::Type STATUS_FLAG_CELL_BALANCING; // 4
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_FAULT_CELL_IMBALANCE >::Type STATUS_FLAG_FAULT_CELL_IMBALANCE; // 8
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_AUTO_DISCHARGING >::Type STATUS_FLAG_AUTO_DISCHARGING; // 16
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_REQUIRES_SERVICE >::Type STATUS_FLAG_REQUIRES_SERVICE; // 32
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_BAD_BATTERY >::Type STATUS_FLAG_BAD_BATTERY; // 64
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_PROTECTIONS_ENABLED >::Type STATUS_FLAG_PROTECTIONS_ENABLED; // 128
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_FAULT_PROTECTION_SYSTEM >::Type STATUS_FLAG_FAULT_PROTECTION_SYSTEM; // 256
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_FAULT_OVER_VOLT >::Type STATUS_FLAG_FAULT_OVER_VOLT; // 512
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_FAULT_UNDER_VOLT >::Type STATUS_FLAG_FAULT_UNDER_VOLT; // 1024
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_FAULT_OVER_TEMP >::Type STATUS_FLAG_FAULT_OVER_TEMP; // 2048
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_FAULT_UNDER_TEMP >::Type STATUS_FLAG_FAULT_UNDER_TEMP; // 4096
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_FAULT_OVER_CURRENT >::Type STATUS_FLAG_FAULT_OVER_CURRENT; // 8192
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_FAULT_SHORT_CIRCUIT >::Type STATUS_FLAG_FAULT_SHORT_CIRCUIT; // 16384
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_FAULT_INCOMPATIBLE_VOLTAGE >::Type STATUS_FLAG_FAULT_INCOMPATIBLE_VOLTAGE; // 32768
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_FAULT_INCOMPATIBLE_FIRMWARE >::Type STATUS_FLAG_FAULT_INCOMPATIBLE_FIRMWARE; // 65536
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION >::Type STATUS_FLAG_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION; // 131072
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_FLAG_CAPACITY_RELATIVE_TO_FULL >::Type STATUS_FLAG_CAPACITY_RELATIVE_TO_FULL; // 262144

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::temperature_cells >::Type temperature_cells;
    typename ::uavcan::StorageType< typename FieldTypes::temperature_pcb >::Type temperature_pcb;
    typename ::uavcan::StorageType< typename FieldTypes::temperature_other >::Type temperature_other;
    typename ::uavcan::StorageType< typename FieldTypes::current >::Type current;
    typename ::uavcan::StorageType< typename FieldTypes::voltage >::Type voltage;
    typename ::uavcan::StorageType< typename FieldTypes::state_of_charge >::Type state_of_charge;
    typename ::uavcan::StorageType< typename FieldTypes::slot_id >::Type slot_id;
    typename ::uavcan::StorageType< typename FieldTypes::capacity_consumed >::Type capacity_consumed;
    typename ::uavcan::StorageType< typename FieldTypes::status_flags >::Type status_flags;

    BatteryContinuous_()
        : temperature_cells()
        , temperature_pcb()
        , temperature_other()
        , current()
        , voltage()
        , state_of_charge()
        , slot_id()
        , capacity_consumed()
        , status_flags()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<200 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 20010 };

    static const char* getDataTypeFullName()
    {
        return "ardupilot.equipment.power.BatteryContinuous";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool BatteryContinuous_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        temperature_cells == rhs.temperature_cells &&
        temperature_pcb == rhs.temperature_pcb &&
        temperature_other == rhs.temperature_other &&
        current == rhs.current &&
        voltage == rhs.voltage &&
        state_of_charge == rhs.state_of_charge &&
        slot_id == rhs.slot_id &&
        capacity_consumed == rhs.capacity_consumed &&
        status_flags == rhs.status_flags;
}

template <int _tmpl>
bool BatteryContinuous_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(temperature_cells, rhs.temperature_cells) &&
        ::uavcan::areClose(temperature_pcb, rhs.temperature_pcb) &&
        ::uavcan::areClose(temperature_other, rhs.temperature_other) &&
        ::uavcan::areClose(current, rhs.current) &&
        ::uavcan::areClose(voltage, rhs.voltage) &&
        ::uavcan::areClose(state_of_charge, rhs.state_of_charge) &&
        ::uavcan::areClose(slot_id, rhs.slot_id) &&
        ::uavcan::areClose(capacity_consumed, rhs.capacity_consumed) &&
        ::uavcan::areClose(status_flags, rhs.status_flags);
}

template <int _tmpl>
int BatteryContinuous_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::temperature_cells::encode(self.temperature_cells, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::temperature_pcb::encode(self.temperature_pcb, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::temperature_other::encode(self.temperature_other, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::current::encode(self.current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::voltage::encode(self.voltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::state_of_charge::encode(self.state_of_charge, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::slot_id::encode(self.slot_id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::capacity_consumed::encode(self.capacity_consumed, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::status_flags::encode(self.status_flags, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int BatteryContinuous_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::temperature_cells::decode(self.temperature_cells, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::temperature_pcb::decode(self.temperature_pcb, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::temperature_other::decode(self.temperature_other, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::current::decode(self.current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::voltage::decode(self.voltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::state_of_charge::decode(self.state_of_charge, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::slot_id::decode(self.slot_id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::capacity_consumed::decode(self.capacity_consumed, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::status_flags::decode(self.status_flags, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature BatteryContinuous_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x756B561340D5E4AEULL);

    FieldTypes::temperature_cells::extendDataTypeSignature(signature);
    FieldTypes::temperature_pcb::extendDataTypeSignature(signature);
    FieldTypes::temperature_other::extendDataTypeSignature(signature);
    FieldTypes::current::extendDataTypeSignature(signature);
    FieldTypes::voltage::extendDataTypeSignature(signature);
    FieldTypes::state_of_charge::extendDataTypeSignature(signature);
    FieldTypes::slot_id::extendDataTypeSignature(signature);
    FieldTypes::capacity_consumed::extendDataTypeSignature(signature);
    FieldTypes::status_flags::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryContinuous_<_tmpl>::ConstantTypes::STATUS_FLAG_READY_TO_USE >::Type
    BatteryContinuous_<_tmpl>::STATUS_FLAG_READY_TO_USE = 1U; // 1

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryContinuous_<_tmpl>::ConstantTypes::STATUS_FLAG_CHARGING >::Type
    BatteryContinuous_<_tmpl>::STATUS_FLAG_CHARGING = 2U; // 2

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryContinuous_<_tmpl>::ConstantTypes::STATUS_FLAG_CELL_BALANCING >::Type
    BatteryContinuous_<_tmpl>::STATUS_FLAG_CELL_BALANCING = 4U; // 4

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryContinuous_<_tmpl>::ConstantTypes::STATUS_FLAG_FAULT_CELL_IMBALANCE >::Type
    BatteryContinuous_<_tmpl>::STATUS_FLAG_FAULT_CELL_IMBALANCE = 8U; // 8

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryContinuous_<_tmpl>::ConstantTypes::STATUS_FLAG_AUTO_DISCHARGING >::Type
    BatteryContinuous_<_tmpl>::STATUS_FLAG_AUTO_DISCHARGING = 16U; // 16

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryContinuous_<_tmpl>::ConstantTypes::STATUS_FLAG_REQUIRES_SERVICE >::Type
    BatteryContinuous_<_tmpl>::STATUS_FLAG_REQUIRES_SERVICE = 32U; // 32

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryContinuous_<_tmpl>::ConstantTypes::STATUS_FLAG_BAD_BATTERY >::Type
    BatteryContinuous_<_tmpl>::STATUS_FLAG_BAD_BATTERY = 64U; // 64

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryContinuous_<_tmpl>::ConstantTypes::STATUS_FLAG_PROTECTIONS_ENABLED >::Type
    BatteryContinuous_<_tmpl>::STATUS_FLAG_PROTECTIONS_ENABLED = 128U; // 128

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryContinuous_<_tmpl>::ConstantTypes::STATUS_FLAG_FAULT_PROTECTION_SYSTEM >::Type
    BatteryContinuous_<_tmpl>::STATUS_FLAG_FAULT_PROTECTION_SYSTEM = 256U; // 256

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryContinuous_<_tmpl>::ConstantTypes::STATUS_FLAG_FAULT_OVER_VOLT >::Type
    BatteryContinuous_<_tmpl>::STATUS_FLAG_FAULT_OVER_VOLT = 512U; // 512

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryContinuous_<_tmpl>::ConstantTypes::STATUS_FLAG_FAULT_UNDER_VOLT >::Type
    BatteryContinuous_<_tmpl>::STATUS_FLAG_FAULT_UNDER_VOLT = 1024U; // 1024

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryContinuous_<_tmpl>::ConstantTypes::STATUS_FLAG_FAULT_OVER_TEMP >::Type
    BatteryContinuous_<_tmpl>::STATUS_FLAG_FAULT_OVER_TEMP = 2048U; // 2048

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryContinuous_<_tmpl>::ConstantTypes::STATUS_FLAG_FAULT_UNDER_TEMP >::Type
    BatteryContinuous_<_tmpl>::STATUS_FLAG_FAULT_UNDER_TEMP = 4096U; // 4096

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryContinuous_<_tmpl>::ConstantTypes::STATUS_FLAG_FAULT_OVER_CURRENT >::Type
    BatteryContinuous_<_tmpl>::STATUS_FLAG_FAULT_OVER_CURRENT = 8192U; // 8192

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryContinuous_<_tmpl>::ConstantTypes::STATUS_FLAG_FAULT_SHORT_CIRCUIT >::Type
    BatteryContinuous_<_tmpl>::STATUS_FLAG_FAULT_SHORT_CIRCUIT = 16384U; // 16384

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryContinuous_<_tmpl>::ConstantTypes::STATUS_FLAG_FAULT_INCOMPATIBLE_VOLTAGE >::Type
    BatteryContinuous_<_tmpl>::STATUS_FLAG_FAULT_INCOMPATIBLE_VOLTAGE = 32768U; // 32768

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryContinuous_<_tmpl>::ConstantTypes::STATUS_FLAG_FAULT_INCOMPATIBLE_FIRMWARE >::Type
    BatteryContinuous_<_tmpl>::STATUS_FLAG_FAULT_INCOMPATIBLE_FIRMWARE = 65536U; // 65536

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryContinuous_<_tmpl>::ConstantTypes::STATUS_FLAG_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION >::Type
    BatteryContinuous_<_tmpl>::STATUS_FLAG_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION = 131072U; // 131072

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryContinuous_<_tmpl>::ConstantTypes::STATUS_FLAG_CAPACITY_RELATIVE_TO_FULL >::Type
    BatteryContinuous_<_tmpl>::STATUS_FLAG_CAPACITY_RELATIVE_TO_FULL = 262144U; // 262144

/*
 * Final typedef
 */
typedef BatteryContinuous_<0> BatteryContinuous;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::ardupilot::equipment::power::BatteryContinuous > _uavcan_gdtr_registrator_BatteryContinuous;

}

} // Namespace power
} // Namespace equipment
} // Namespace ardupilot

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::ardupilot::equipment::power::BatteryContinuous >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::ardupilot::equipment::power::BatteryContinuous::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::ardupilot::equipment::power::BatteryContinuous >::stream(Stream& s, ::ardupilot::equipment::power::BatteryContinuous::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "temperature_cells: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryContinuous::FieldTypes::temperature_cells >::stream(s, obj.temperature_cells, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "temperature_pcb: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryContinuous::FieldTypes::temperature_pcb >::stream(s, obj.temperature_pcb, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "temperature_other: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryContinuous::FieldTypes::temperature_other >::stream(s, obj.temperature_other, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "current: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryContinuous::FieldTypes::current >::stream(s, obj.current, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "voltage: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryContinuous::FieldTypes::voltage >::stream(s, obj.voltage, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "state_of_charge: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryContinuous::FieldTypes::state_of_charge >::stream(s, obj.state_of_charge, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "slot_id: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryContinuous::FieldTypes::slot_id >::stream(s, obj.slot_id, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "capacity_consumed: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryContinuous::FieldTypes::capacity_consumed >::stream(s, obj.capacity_consumed, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "status_flags: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryContinuous::FieldTypes::status_flags >::stream(s, obj.status_flags, level + 1);
}

}

namespace ardupilot
{
namespace equipment
{
namespace power
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::ardupilot::equipment::power::BatteryContinuous::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::ardupilot::equipment::power::BatteryContinuous >::stream(s, obj, 0);
    return s;
}

} // Namespace power
} // Namespace equipment
} // Namespace ardupilot

#endif // ARDUPILOT_EQUIPMENT_POWER_BATTERYCONTINUOUS_HPP_INCLUDED