/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/user/cyberimmune-systems-autonomous-delivery-drone-with-kos-contest/modules/DroneCAN/DSDL/ardupilot/equipment/power/20012.BatteryCells.uavcan
 */

#ifndef ARDUPILOT_EQUIPMENT_POWER_BATTERYCELLS_HPP_INCLUDED
#define ARDUPILOT_EQUIPMENT_POWER_BATTERYCELLS_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Battery cell voltages
# Rate: set by parameter on smart battery (default off)
#

float16[<=24] voltages            # [Volt]
uint16 index                      # Index of the first cell in the array, index 0 is cells at array indices 0 - 23, index 24 is cells at array indices 24 - 47, etc.
******************************************************************************/

/********************* DSDL signature source definition ***********************
ardupilot.equipment.power.BatteryCells
saturated float16[<=24] voltages
saturated uint16 index
******************************************************************************/

#undef voltages
#undef index

namespace ardupilot
{
namespace equipment
{
namespace power
{

template <int _tmpl>
struct UAVCAN_EXPORT BatteryCells_
{
    typedef const BatteryCells_<_tmpl>& ParameterType;
    typedef BatteryCells_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::Array< ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 24 > voltages;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > index;
    };

    enum
    {
        MinBitLen
            = FieldTypes::voltages::MinBitLen
            + FieldTypes::index::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::voltages::MaxBitLen
            + FieldTypes::index::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::voltages >::Type voltages;
    typename ::uavcan::StorageType< typename FieldTypes::index >::Type index;

    BatteryCells_()
        : voltages()
        , index()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<405 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 20012 };

    static const char* getDataTypeFullName()
    {
        return "ardupilot.equipment.power.BatteryCells";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool BatteryCells_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        voltages == rhs.voltages &&
        index == rhs.index;
}

template <int _tmpl>
bool BatteryCells_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(voltages, rhs.voltages) &&
        ::uavcan::areClose(index, rhs.index);
}

template <int _tmpl>
int BatteryCells_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::voltages::encode(self.voltages, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::index::encode(self.index, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int BatteryCells_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::voltages::decode(self.voltages, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::index::decode(self.index, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature BatteryCells_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x5C8B1ABD15890EA4ULL);

    FieldTypes::voltages::extendDataTypeSignature(signature);
    FieldTypes::index::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef BatteryCells_<0> BatteryCells;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::ardupilot::equipment::power::BatteryCells > _uavcan_gdtr_registrator_BatteryCells;

}

} // Namespace power
} // Namespace equipment
} // Namespace ardupilot

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::ardupilot::equipment::power::BatteryCells >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::ardupilot::equipment::power::BatteryCells::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::ardupilot::equipment::power::BatteryCells >::stream(Stream& s, ::ardupilot::equipment::power::BatteryCells::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "voltages: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryCells::FieldTypes::voltages >::stream(s, obj.voltages, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "index: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryCells::FieldTypes::index >::stream(s, obj.index, level + 1);
}

}

namespace ardupilot
{
namespace equipment
{
namespace power
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::ardupilot::equipment::power::BatteryCells::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::ardupilot::equipment::power::BatteryCells >::stream(s, obj, 0);
    return s;
}

} // Namespace power
} // Namespace equipment
} // Namespace ardupilot

#endif // ARDUPILOT_EQUIPMENT_POWER_BATTERYCELLS_HPP_INCLUDED