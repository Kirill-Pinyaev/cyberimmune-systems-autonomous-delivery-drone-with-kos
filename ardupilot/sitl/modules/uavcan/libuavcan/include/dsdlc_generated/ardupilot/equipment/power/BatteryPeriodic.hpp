/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/user/cyberimmune-systems-autonomous-delivery-drone-with-kos-contest/modules/DroneCAN/DSDL/ardupilot/equipment/power/20011.BatteryPeriodic.uavcan
 */

#ifndef ARDUPILOT_EQUIPMENT_POWER_BATTERYPERIODIC_HPP_INCLUDED
#define ARDUPILOT_EQUIPMENT_POWER_BATTERYPERIODIC_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Battery data to be sent statically upon request or periodically at a low rate
#  Recommend that this message is sent at a maximum of 1Hz and nominally 0.2 Hz (IE: once every 5 seconds.)

uint8[<=50] name                        #      : Formatted as manufacturer_product, 0 terminated
uint8[<=32] serial_number               #      : Serial number in ASCII characters, 0 terminated
uint8[<=9] manufacture_date             #      : Manufacture date (DDMMYYYY) in ASCII characters, 0 terminated
float32 design_capacity                 # [Ah] : Fully charged design capacity. 0: field not provided.
uint8 cells_in_series                   #      : Number of battery cells in series. 0: field not provided.
float16 nominal_voltage                 # [V]  : Battery nominal voltage. Used for conversion between Wh and Ah. 0: field not provided.
float16 discharge_minimum_voltage       # [V]  : Minimum per-cell voltage when discharging. 0: field not provided.
float16 charging_minimum_voltage        # [V]  : Minimum per-cell voltage when charging. 0: field not provided.
float16 charging_maximum_voltage        # [V]  : Maximum per-cell voltage when charged. 0: field not provided.
float32 charging_maximum_current        # [A]  : Maximum pack continuous charge current. 0: field not provided.
float32 discharge_maximum_current       # [A]  : Maximum pack continuous discharge current. 0: field not provided.
float32 discharge_maximum_burst_current # [A]  : Maximum pack discharge burst current for 30 seconds. 0: field not provided
float32 full_charge_capacity            # [Ah] : Predicted battery capacity when fully charged (accounting for battery degradation), NAN: field not provided
uint16 cycle_count                      #      : Lifetime count of the number of charge/discharge cycles (https://en.wikipedia.org/wiki/Charge_cycle). UINT16_MAX: field not provided.
uint8 state_of_health                   # [%]  : State of Health (SOH) estimate, in percent (0 - 100). UINT8_MAX: field not provided.
******************************************************************************/

/********************* DSDL signature source definition ***********************
ardupilot.equipment.power.BatteryPeriodic
saturated uint8[<=50] name
saturated uint8[<=32] serial_number
saturated uint8[<=9] manufacture_date
saturated float32 design_capacity
saturated uint8 cells_in_series
saturated float16 nominal_voltage
saturated float16 discharge_minimum_voltage
saturated float16 charging_minimum_voltage
saturated float16 charging_maximum_voltage
saturated float32 charging_maximum_current
saturated float32 discharge_maximum_current
saturated float32 discharge_maximum_burst_current
saturated float32 full_charge_capacity
saturated uint16 cycle_count
saturated uint8 state_of_health
******************************************************************************/

#undef name
#undef serial_number
#undef manufacture_date
#undef design_capacity
#undef cells_in_series
#undef nominal_voltage
#undef discharge_minimum_voltage
#undef charging_minimum_voltage
#undef charging_maximum_voltage
#undef charging_maximum_current
#undef discharge_maximum_current
#undef discharge_maximum_burst_current
#undef full_charge_capacity
#undef cycle_count
#undef state_of_health

namespace ardupilot
{
namespace equipment
{
namespace power
{

template <int _tmpl>
struct UAVCAN_EXPORT BatteryPeriodic_
{
    typedef const BatteryPeriodic_<_tmpl>& ParameterType;
    typedef BatteryPeriodic_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 50 > name;
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 32 > serial_number;
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 9 > manufacture_date;
        typedef ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate > design_capacity;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > cells_in_series;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > nominal_voltage;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > discharge_minimum_voltage;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > charging_minimum_voltage;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > charging_maximum_voltage;
        typedef ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate > charging_maximum_current;
        typedef ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate > discharge_maximum_current;
        typedef ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate > discharge_maximum_burst_current;
        typedef ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate > full_charge_capacity;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > cycle_count;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > state_of_health;
    };

    enum
    {
        MinBitLen
            = FieldTypes::name::MinBitLen
            + FieldTypes::serial_number::MinBitLen
            + FieldTypes::manufacture_date::MinBitLen
            + FieldTypes::design_capacity::MinBitLen
            + FieldTypes::cells_in_series::MinBitLen
            + FieldTypes::nominal_voltage::MinBitLen
            + FieldTypes::discharge_minimum_voltage::MinBitLen
            + FieldTypes::charging_minimum_voltage::MinBitLen
            + FieldTypes::charging_maximum_voltage::MinBitLen
            + FieldTypes::charging_maximum_current::MinBitLen
            + FieldTypes::discharge_maximum_current::MinBitLen
            + FieldTypes::discharge_maximum_burst_current::MinBitLen
            + FieldTypes::full_charge_capacity::MinBitLen
            + FieldTypes::cycle_count::MinBitLen
            + FieldTypes::state_of_health::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::name::MaxBitLen
            + FieldTypes::serial_number::MaxBitLen
            + FieldTypes::manufacture_date::MaxBitLen
            + FieldTypes::design_capacity::MaxBitLen
            + FieldTypes::cells_in_series::MaxBitLen
            + FieldTypes::nominal_voltage::MaxBitLen
            + FieldTypes::discharge_minimum_voltage::MaxBitLen
            + FieldTypes::charging_minimum_voltage::MaxBitLen
            + FieldTypes::charging_maximum_voltage::MaxBitLen
            + FieldTypes::charging_maximum_current::MaxBitLen
            + FieldTypes::discharge_maximum_current::MaxBitLen
            + FieldTypes::discharge_maximum_burst_current::MaxBitLen
            + FieldTypes::full_charge_capacity::MaxBitLen
            + FieldTypes::cycle_count::MaxBitLen
            + FieldTypes::state_of_health::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::name >::Type name;
    typename ::uavcan::StorageType< typename FieldTypes::serial_number >::Type serial_number;
    typename ::uavcan::StorageType< typename FieldTypes::manufacture_date >::Type manufacture_date;
    typename ::uavcan::StorageType< typename FieldTypes::design_capacity >::Type design_capacity;
    typename ::uavcan::StorageType< typename FieldTypes::cells_in_series >::Type cells_in_series;
    typename ::uavcan::StorageType< typename FieldTypes::nominal_voltage >::Type nominal_voltage;
    typename ::uavcan::StorageType< typename FieldTypes::discharge_minimum_voltage >::Type discharge_minimum_voltage;
    typename ::uavcan::StorageType< typename FieldTypes::charging_minimum_voltage >::Type charging_minimum_voltage;
    typename ::uavcan::StorageType< typename FieldTypes::charging_maximum_voltage >::Type charging_maximum_voltage;
    typename ::uavcan::StorageType< typename FieldTypes::charging_maximum_current >::Type charging_maximum_current;
    typename ::uavcan::StorageType< typename FieldTypes::discharge_maximum_current >::Type discharge_maximum_current;
    typename ::uavcan::StorageType< typename FieldTypes::discharge_maximum_burst_current >::Type discharge_maximum_burst_current;
    typename ::uavcan::StorageType< typename FieldTypes::full_charge_capacity >::Type full_charge_capacity;
    typename ::uavcan::StorageType< typename FieldTypes::cycle_count >::Type cycle_count;
    typename ::uavcan::StorageType< typename FieldTypes::state_of_health >::Type state_of_health;

    BatteryPeriodic_()
        : name()
        , serial_number()
        , manufacture_date()
        , design_capacity()
        , cells_in_series()
        , nominal_voltage()
        , discharge_minimum_voltage()
        , charging_minimum_voltage()
        , charging_maximum_voltage()
        , charging_maximum_current()
        , discharge_maximum_current()
        , discharge_maximum_burst_current()
        , full_charge_capacity()
        , cycle_count()
        , state_of_health()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<1000 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 20011 };

    static const char* getDataTypeFullName()
    {
        return "ardupilot.equipment.power.BatteryPeriodic";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool BatteryPeriodic_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        name == rhs.name &&
        serial_number == rhs.serial_number &&
        manufacture_date == rhs.manufacture_date &&
        design_capacity == rhs.design_capacity &&
        cells_in_series == rhs.cells_in_series &&
        nominal_voltage == rhs.nominal_voltage &&
        discharge_minimum_voltage == rhs.discharge_minimum_voltage &&
        charging_minimum_voltage == rhs.charging_minimum_voltage &&
        charging_maximum_voltage == rhs.charging_maximum_voltage &&
        charging_maximum_current == rhs.charging_maximum_current &&
        discharge_maximum_current == rhs.discharge_maximum_current &&
        discharge_maximum_burst_current == rhs.discharge_maximum_burst_current &&
        full_charge_capacity == rhs.full_charge_capacity &&
        cycle_count == rhs.cycle_count &&
        state_of_health == rhs.state_of_health;
}

template <int _tmpl>
bool BatteryPeriodic_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(name, rhs.name) &&
        ::uavcan::areClose(serial_number, rhs.serial_number) &&
        ::uavcan::areClose(manufacture_date, rhs.manufacture_date) &&
        ::uavcan::areClose(design_capacity, rhs.design_capacity) &&
        ::uavcan::areClose(cells_in_series, rhs.cells_in_series) &&
        ::uavcan::areClose(nominal_voltage, rhs.nominal_voltage) &&
        ::uavcan::areClose(discharge_minimum_voltage, rhs.discharge_minimum_voltage) &&
        ::uavcan::areClose(charging_minimum_voltage, rhs.charging_minimum_voltage) &&
        ::uavcan::areClose(charging_maximum_voltage, rhs.charging_maximum_voltage) &&
        ::uavcan::areClose(charging_maximum_current, rhs.charging_maximum_current) &&
        ::uavcan::areClose(discharge_maximum_current, rhs.discharge_maximum_current) &&
        ::uavcan::areClose(discharge_maximum_burst_current, rhs.discharge_maximum_burst_current) &&
        ::uavcan::areClose(full_charge_capacity, rhs.full_charge_capacity) &&
        ::uavcan::areClose(cycle_count, rhs.cycle_count) &&
        ::uavcan::areClose(state_of_health, rhs.state_of_health);
}

template <int _tmpl>
int BatteryPeriodic_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::name::encode(self.name, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::serial_number::encode(self.serial_number, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::manufacture_date::encode(self.manufacture_date, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::design_capacity::encode(self.design_capacity, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::cells_in_series::encode(self.cells_in_series, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::nominal_voltage::encode(self.nominal_voltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::discharge_minimum_voltage::encode(self.discharge_minimum_voltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::charging_minimum_voltage::encode(self.charging_minimum_voltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::charging_maximum_voltage::encode(self.charging_maximum_voltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::charging_maximum_current::encode(self.charging_maximum_current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::discharge_maximum_current::encode(self.discharge_maximum_current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::discharge_maximum_burst_current::encode(self.discharge_maximum_burst_current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::full_charge_capacity::encode(self.full_charge_capacity, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::cycle_count::encode(self.cycle_count, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::state_of_health::encode(self.state_of_health, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int BatteryPeriodic_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::name::decode(self.name, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::serial_number::decode(self.serial_number, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::manufacture_date::decode(self.manufacture_date, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::design_capacity::decode(self.design_capacity, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::cells_in_series::decode(self.cells_in_series, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::nominal_voltage::decode(self.nominal_voltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::discharge_minimum_voltage::decode(self.discharge_minimum_voltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::charging_minimum_voltage::decode(self.charging_minimum_voltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::charging_maximum_voltage::decode(self.charging_maximum_voltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::charging_maximum_current::decode(self.charging_maximum_current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::discharge_maximum_current::decode(self.discharge_maximum_current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::discharge_maximum_burst_current::decode(self.discharge_maximum_burst_current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::full_charge_capacity::decode(self.full_charge_capacity, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::cycle_count::decode(self.cycle_count, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::state_of_health::decode(self.state_of_health, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature BatteryPeriodic_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0xF012494E97358D2ULL);

    FieldTypes::name::extendDataTypeSignature(signature);
    FieldTypes::serial_number::extendDataTypeSignature(signature);
    FieldTypes::manufacture_date::extendDataTypeSignature(signature);
    FieldTypes::design_capacity::extendDataTypeSignature(signature);
    FieldTypes::cells_in_series::extendDataTypeSignature(signature);
    FieldTypes::nominal_voltage::extendDataTypeSignature(signature);
    FieldTypes::discharge_minimum_voltage::extendDataTypeSignature(signature);
    FieldTypes::charging_minimum_voltage::extendDataTypeSignature(signature);
    FieldTypes::charging_maximum_voltage::extendDataTypeSignature(signature);
    FieldTypes::charging_maximum_current::extendDataTypeSignature(signature);
    FieldTypes::discharge_maximum_current::extendDataTypeSignature(signature);
    FieldTypes::discharge_maximum_burst_current::extendDataTypeSignature(signature);
    FieldTypes::full_charge_capacity::extendDataTypeSignature(signature);
    FieldTypes::cycle_count::extendDataTypeSignature(signature);
    FieldTypes::state_of_health::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef BatteryPeriodic_<0> BatteryPeriodic;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::ardupilot::equipment::power::BatteryPeriodic > _uavcan_gdtr_registrator_BatteryPeriodic;

}

} // Namespace power
} // Namespace equipment
} // Namespace ardupilot

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::ardupilot::equipment::power::BatteryPeriodic >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::ardupilot::equipment::power::BatteryPeriodic::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::ardupilot::equipment::power::BatteryPeriodic >::stream(Stream& s, ::ardupilot::equipment::power::BatteryPeriodic::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "name: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryPeriodic::FieldTypes::name >::stream(s, obj.name, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "serial_number: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryPeriodic::FieldTypes::serial_number >::stream(s, obj.serial_number, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "manufacture_date: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryPeriodic::FieldTypes::manufacture_date >::stream(s, obj.manufacture_date, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "design_capacity: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryPeriodic::FieldTypes::design_capacity >::stream(s, obj.design_capacity, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "cells_in_series: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryPeriodic::FieldTypes::cells_in_series >::stream(s, obj.cells_in_series, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "nominal_voltage: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryPeriodic::FieldTypes::nominal_voltage >::stream(s, obj.nominal_voltage, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "discharge_minimum_voltage: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryPeriodic::FieldTypes::discharge_minimum_voltage >::stream(s, obj.discharge_minimum_voltage, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "charging_minimum_voltage: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryPeriodic::FieldTypes::charging_minimum_voltage >::stream(s, obj.charging_minimum_voltage, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "charging_maximum_voltage: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryPeriodic::FieldTypes::charging_maximum_voltage >::stream(s, obj.charging_maximum_voltage, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "charging_maximum_current: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryPeriodic::FieldTypes::charging_maximum_current >::stream(s, obj.charging_maximum_current, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "discharge_maximum_current: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryPeriodic::FieldTypes::discharge_maximum_current >::stream(s, obj.discharge_maximum_current, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "discharge_maximum_burst_current: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryPeriodic::FieldTypes::discharge_maximum_burst_current >::stream(s, obj.discharge_maximum_burst_current, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "full_charge_capacity: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryPeriodic::FieldTypes::full_charge_capacity >::stream(s, obj.full_charge_capacity, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "cycle_count: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryPeriodic::FieldTypes::cycle_count >::stream(s, obj.cycle_count, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "state_of_health: ";
    YamlStreamer< ::ardupilot::equipment::power::BatteryPeriodic::FieldTypes::state_of_health >::stream(s, obj.state_of_health, level + 1);
}

}

namespace ardupilot
{
namespace equipment
{
namespace power
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::ardupilot::equipment::power::BatteryPeriodic::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::ardupilot::equipment::power::BatteryPeriodic >::stream(s, obj, 0);
    return s;
}

} // Namespace power
} // Namespace equipment
} // Namespace ardupilot

#endif // ARDUPILOT_EQUIPMENT_POWER_BATTERYPERIODIC_HPP_INCLUDED