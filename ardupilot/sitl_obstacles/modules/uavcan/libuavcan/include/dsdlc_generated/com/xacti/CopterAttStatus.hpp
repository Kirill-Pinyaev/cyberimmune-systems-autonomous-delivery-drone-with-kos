/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/user/cyberimmune-systems-autonomous-delivery-drone-with-kos-contest/modules/DroneCAN/DSDL/com/xacti/20407.CopterAttStatus.uavcan
 */

#ifndef COM_XACTI_COPTERATTSTATUS_HPP_INCLUDED
#define COM_XACTI_COPTERATTSTATUS_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Xacti specific vehicle attitude provided to camera gimbal
# send periodically 5~10Hz.
#
# quaternion_wxyz_e4[0] = q.w	(or q.q0) * 1e4f
# quaternion_wxyz_e4[1] = q.x	(or q.q1) * 1e4f
# quaternion_wxyz_e4[2] = q.y	(or q.q2) * 1e4f
# quaternion_wxyz_e4[3] = q.z	(or q.q3) * 1e4f
#

# signature from original file location
OVERRIDE_SIGNATURE 0x6C1F30F1893763B1

#
# vehicle attitude quaternion * 1e4
#
int16[4] quaternion_wxyz_e4

#
# reserved
#
float16[<=2] reserved
******************************************************************************/

/********************* DSDL signature source definition ***********************
com.xacti.CopterAttStatus
saturated int16[4] quaternion_wxyz_e4
saturated float16[<=2] reserved
******************************************************************************/

#undef quaternion_wxyz_e4
#undef reserved

namespace com
{
namespace xacti
{

template <int _tmpl>
struct UAVCAN_EXPORT CopterAttStatus_
{
    typedef const CopterAttStatus_<_tmpl>& ParameterType;
    typedef CopterAttStatus_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 16, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeStatic, 4 > quaternion_wxyz_e4;
        typedef ::uavcan::Array< ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 2 > reserved;
    };

    enum
    {
        MinBitLen
            = FieldTypes::quaternion_wxyz_e4::MinBitLen
            + FieldTypes::reserved::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::quaternion_wxyz_e4::MaxBitLen
            + FieldTypes::reserved::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::quaternion_wxyz_e4 >::Type quaternion_wxyz_e4;
    typename ::uavcan::StorageType< typename FieldTypes::reserved >::Type reserved;

    CopterAttStatus_()
        : quaternion_wxyz_e4()
        , reserved()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<98 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 20407 };

    static const char* getDataTypeFullName()
    {
        return "com.xacti.CopterAttStatus";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool CopterAttStatus_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        quaternion_wxyz_e4 == rhs.quaternion_wxyz_e4 &&
        reserved == rhs.reserved;
}

template <int _tmpl>
bool CopterAttStatus_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(quaternion_wxyz_e4, rhs.quaternion_wxyz_e4) &&
        ::uavcan::areClose(reserved, rhs.reserved);
}

template <int _tmpl>
int CopterAttStatus_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::quaternion_wxyz_e4::encode(self.quaternion_wxyz_e4, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::reserved::encode(self.reserved, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int CopterAttStatus_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::quaternion_wxyz_e4::decode(self.quaternion_wxyz_e4, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::reserved::decode(self.reserved, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature CopterAttStatus_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x6C1F30F1893763B1ULL);

    FieldTypes::quaternion_wxyz_e4::extendDataTypeSignature(signature);
    FieldTypes::reserved::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef CopterAttStatus_<0> CopterAttStatus;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::com::xacti::CopterAttStatus > _uavcan_gdtr_registrator_CopterAttStatus;

}

} // Namespace xacti
} // Namespace com

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::com::xacti::CopterAttStatus >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::com::xacti::CopterAttStatus::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::com::xacti::CopterAttStatus >::stream(Stream& s, ::com::xacti::CopterAttStatus::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "quaternion_wxyz_e4: ";
    YamlStreamer< ::com::xacti::CopterAttStatus::FieldTypes::quaternion_wxyz_e4 >::stream(s, obj.quaternion_wxyz_e4, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "reserved: ";
    YamlStreamer< ::com::xacti::CopterAttStatus::FieldTypes::reserved >::stream(s, obj.reserved, level + 1);
}

}

namespace com
{
namespace xacti
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::com::xacti::CopterAttStatus::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::com::xacti::CopterAttStatus >::stream(s, obj, 0);
    return s;
}

} // Namespace xacti
} // Namespace com

#endif // COM_XACTI_COPTERATTSTATUS_HPP_INCLUDED