/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/user/cyberimmune-systems-autonomous-delivery-drone-with-kos-contest/modules/DroneCAN/DSDL/com/xacti/20402.GimbalAttitudeStatus.uavcan
 */

#ifndef COM_XACTI_GIMBALATTITUDESTATUS_HPP_INCLUDED
#define COM_XACTI_GIMBALATTITUDESTATUS_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Xacti camera gimbal attitude status
#

# signature from original file location
OVERRIDE_SIGNATURE 0xEB428B6C25832692

# gimbal attitude in euler centi-degrees from -18000 to +18000
int16 gimbal_roll
int16 gimbal_pitch
int16 gimbal_yaw
int16 magneticencoder_roll
int16 magneticencoder_pitch
int16 magneticencoder_yaw
******************************************************************************/

/********************* DSDL signature source definition ***********************
com.xacti.GimbalAttitudeStatus
saturated int16 gimbal_roll
saturated int16 gimbal_pitch
saturated int16 gimbal_yaw
saturated int16 magneticencoder_roll
saturated int16 magneticencoder_pitch
saturated int16 magneticencoder_yaw
******************************************************************************/

#undef gimbal_roll
#undef gimbal_pitch
#undef gimbal_yaw
#undef magneticencoder_roll
#undef magneticencoder_pitch
#undef magneticencoder_yaw

namespace com
{
namespace xacti
{

template <int _tmpl>
struct UAVCAN_EXPORT GimbalAttitudeStatus_
{
    typedef const GimbalAttitudeStatus_<_tmpl>& ParameterType;
    typedef GimbalAttitudeStatus_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > gimbal_roll;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > gimbal_pitch;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > gimbal_yaw;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > magneticencoder_roll;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > magneticencoder_pitch;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > magneticencoder_yaw;
    };

    enum
    {
        MinBitLen
            = FieldTypes::gimbal_roll::MinBitLen
            + FieldTypes::gimbal_pitch::MinBitLen
            + FieldTypes::gimbal_yaw::MinBitLen
            + FieldTypes::magneticencoder_roll::MinBitLen
            + FieldTypes::magneticencoder_pitch::MinBitLen
            + FieldTypes::magneticencoder_yaw::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::gimbal_roll::MaxBitLen
            + FieldTypes::gimbal_pitch::MaxBitLen
            + FieldTypes::gimbal_yaw::MaxBitLen
            + FieldTypes::magneticencoder_roll::MaxBitLen
            + FieldTypes::magneticencoder_pitch::MaxBitLen
            + FieldTypes::magneticencoder_yaw::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::gimbal_roll >::Type gimbal_roll;
    typename ::uavcan::StorageType< typename FieldTypes::gimbal_pitch >::Type gimbal_pitch;
    typename ::uavcan::StorageType< typename FieldTypes::gimbal_yaw >::Type gimbal_yaw;
    typename ::uavcan::StorageType< typename FieldTypes::magneticencoder_roll >::Type magneticencoder_roll;
    typename ::uavcan::StorageType< typename FieldTypes::magneticencoder_pitch >::Type magneticencoder_pitch;
    typename ::uavcan::StorageType< typename FieldTypes::magneticencoder_yaw >::Type magneticencoder_yaw;

    GimbalAttitudeStatus_()
        : gimbal_roll()
        , gimbal_pitch()
        , gimbal_yaw()
        , magneticencoder_roll()
        , magneticencoder_pitch()
        , magneticencoder_yaw()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<96 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 20402 };

    static const char* getDataTypeFullName()
    {
        return "com.xacti.GimbalAttitudeStatus";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool GimbalAttitudeStatus_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        gimbal_roll == rhs.gimbal_roll &&
        gimbal_pitch == rhs.gimbal_pitch &&
        gimbal_yaw == rhs.gimbal_yaw &&
        magneticencoder_roll == rhs.magneticencoder_roll &&
        magneticencoder_pitch == rhs.magneticencoder_pitch &&
        magneticencoder_yaw == rhs.magneticencoder_yaw;
}

template <int _tmpl>
bool GimbalAttitudeStatus_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(gimbal_roll, rhs.gimbal_roll) &&
        ::uavcan::areClose(gimbal_pitch, rhs.gimbal_pitch) &&
        ::uavcan::areClose(gimbal_yaw, rhs.gimbal_yaw) &&
        ::uavcan::areClose(magneticencoder_roll, rhs.magneticencoder_roll) &&
        ::uavcan::areClose(magneticencoder_pitch, rhs.magneticencoder_pitch) &&
        ::uavcan::areClose(magneticencoder_yaw, rhs.magneticencoder_yaw);
}

template <int _tmpl>
int GimbalAttitudeStatus_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::gimbal_roll::encode(self.gimbal_roll, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::gimbal_pitch::encode(self.gimbal_pitch, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::gimbal_yaw::encode(self.gimbal_yaw, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::magneticencoder_roll::encode(self.magneticencoder_roll, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::magneticencoder_pitch::encode(self.magneticencoder_pitch, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::magneticencoder_yaw::encode(self.magneticencoder_yaw, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int GimbalAttitudeStatus_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::gimbal_roll::decode(self.gimbal_roll, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::gimbal_pitch::decode(self.gimbal_pitch, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::gimbal_yaw::decode(self.gimbal_yaw, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::magneticencoder_roll::decode(self.magneticencoder_roll, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::magneticencoder_pitch::decode(self.magneticencoder_pitch, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::magneticencoder_yaw::decode(self.magneticencoder_yaw, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature GimbalAttitudeStatus_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0xEB428B6C25832692ULL);

    FieldTypes::gimbal_roll::extendDataTypeSignature(signature);
    FieldTypes::gimbal_pitch::extendDataTypeSignature(signature);
    FieldTypes::gimbal_yaw::extendDataTypeSignature(signature);
    FieldTypes::magneticencoder_roll::extendDataTypeSignature(signature);
    FieldTypes::magneticencoder_pitch::extendDataTypeSignature(signature);
    FieldTypes::magneticencoder_yaw::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef GimbalAttitudeStatus_<0> GimbalAttitudeStatus;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::com::xacti::GimbalAttitudeStatus > _uavcan_gdtr_registrator_GimbalAttitudeStatus;

}

} // Namespace xacti
} // Namespace com

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::com::xacti::GimbalAttitudeStatus >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::com::xacti::GimbalAttitudeStatus::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::com::xacti::GimbalAttitudeStatus >::stream(Stream& s, ::com::xacti::GimbalAttitudeStatus::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "gimbal_roll: ";
    YamlStreamer< ::com::xacti::GimbalAttitudeStatus::FieldTypes::gimbal_roll >::stream(s, obj.gimbal_roll, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "gimbal_pitch: ";
    YamlStreamer< ::com::xacti::GimbalAttitudeStatus::FieldTypes::gimbal_pitch >::stream(s, obj.gimbal_pitch, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "gimbal_yaw: ";
    YamlStreamer< ::com::xacti::GimbalAttitudeStatus::FieldTypes::gimbal_yaw >::stream(s, obj.gimbal_yaw, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "magneticencoder_roll: ";
    YamlStreamer< ::com::xacti::GimbalAttitudeStatus::FieldTypes::magneticencoder_roll >::stream(s, obj.magneticencoder_roll, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "magneticencoder_pitch: ";
    YamlStreamer< ::com::xacti::GimbalAttitudeStatus::FieldTypes::magneticencoder_pitch >::stream(s, obj.magneticencoder_pitch, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "magneticencoder_yaw: ";
    YamlStreamer< ::com::xacti::GimbalAttitudeStatus::FieldTypes::magneticencoder_yaw >::stream(s, obj.magneticencoder_yaw, level + 1);
}

}

namespace com
{
namespace xacti
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::com::xacti::GimbalAttitudeStatus::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::com::xacti::GimbalAttitudeStatus >::stream(s, obj, 0);
    return s;
}

} // Namespace xacti
} // Namespace com

#endif // COM_XACTI_GIMBALATTITUDESTATUS_HPP_INCLUDED