/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/user/cyberimmune-systems-autonomous-delivery-drone-with-kos-contest/modules/DroneCAN/DSDL/com/hobbywing/esc/214.SetReportingFrequency.uavcan
 */

#ifndef COM_HOBBYWING_ESC_SETREPORTINGFREQUENCY_HPP_INCLUDED
#define COM_HOBBYWING_ESC_SETREPORTINGFREQUENCY_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
OVERRIDE_SIGNATURE 0x1fd0404420983deb

uint8 OPTION_READ = 0
uint8 OPTION_WRITE = 1
uint8 option

uint16 MSG_ID

uint8 RATE_500HZ = 1
uint8 RATE_250HZ = 2
uint8 RATE_200HZ = 3
uint8 RATE_100HZ = 4
uint8 RATE_50HZ = 5
uint8 RATE_20HZ = 6
uint8 RATE_10HZ = 7
uint8 RATE_1HZ = 8
uint8 RATE_0HZ = 9
uint8 rate

---

uint8 option
uint16 MSG_ID
uint8 rate
******************************************************************************/

/********************* DSDL signature source definition ***********************
com.hobbywing.esc.SetReportingFrequency
saturated uint8 option
saturated uint16 MSG_ID
saturated uint8 rate
---
saturated uint8 option
saturated uint16 MSG_ID
saturated uint8 rate
******************************************************************************/

#undef option
#undef MSG_ID
#undef rate
#undef OPTION_READ
#undef OPTION_WRITE
#undef RATE_500HZ
#undef RATE_250HZ
#undef RATE_200HZ
#undef RATE_100HZ
#undef RATE_50HZ
#undef RATE_20HZ
#undef RATE_10HZ
#undef RATE_1HZ
#undef RATE_0HZ
#undef option
#undef MSG_ID
#undef rate

namespace com
{
namespace hobbywing
{
namespace esc
{

struct UAVCAN_EXPORT SetReportingFrequency_
{
    template <int _tmpl>
    struct Request_
    {
        typedef const Request_<_tmpl>& ParameterType;
        typedef Request_<_tmpl>& ReferenceType;

        struct ConstantTypes
        {
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > OPTION_READ;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > OPTION_WRITE;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > RATE_500HZ;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > RATE_250HZ;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > RATE_200HZ;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > RATE_100HZ;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > RATE_50HZ;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > RATE_20HZ;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > RATE_10HZ;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > RATE_1HZ;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > RATE_0HZ;
        };

        struct FieldTypes
        {
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > option;
            typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > MSG_ID;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > rate;
        };

        enum
        {
            MinBitLen
                = FieldTypes::option::MinBitLen
                + FieldTypes::MSG_ID::MinBitLen
                + FieldTypes::rate::MinBitLen
        };

        enum
        {
            MaxBitLen
                = FieldTypes::option::MaxBitLen
                + FieldTypes::MSG_ID::MaxBitLen
                + FieldTypes::rate::MaxBitLen
        };

        // Constants
        static const typename ::uavcan::StorageType< typename ConstantTypes::OPTION_READ >::Type OPTION_READ; // 0
        static const typename ::uavcan::StorageType< typename ConstantTypes::OPTION_WRITE >::Type OPTION_WRITE; // 1
        static const typename ::uavcan::StorageType< typename ConstantTypes::RATE_500HZ >::Type RATE_500HZ; // 1
        static const typename ::uavcan::StorageType< typename ConstantTypes::RATE_250HZ >::Type RATE_250HZ; // 2
        static const typename ::uavcan::StorageType< typename ConstantTypes::RATE_200HZ >::Type RATE_200HZ; // 3
        static const typename ::uavcan::StorageType< typename ConstantTypes::RATE_100HZ >::Type RATE_100HZ; // 4
        static const typename ::uavcan::StorageType< typename ConstantTypes::RATE_50HZ >::Type RATE_50HZ; // 5
        static const typename ::uavcan::StorageType< typename ConstantTypes::RATE_20HZ >::Type RATE_20HZ; // 6
        static const typename ::uavcan::StorageType< typename ConstantTypes::RATE_10HZ >::Type RATE_10HZ; // 7
        static const typename ::uavcan::StorageType< typename ConstantTypes::RATE_1HZ >::Type RATE_1HZ; // 8
        static const typename ::uavcan::StorageType< typename ConstantTypes::RATE_0HZ >::Type RATE_0HZ; // 9

        // Fields
        typename ::uavcan::StorageType< typename FieldTypes::option >::Type option;
        typename ::uavcan::StorageType< typename FieldTypes::MSG_ID >::Type MSG_ID;
        typename ::uavcan::StorageType< typename FieldTypes::rate >::Type rate;

        Request_()
            : option()
            , MSG_ID()
            , rate()
        {
            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

    #if UAVCAN_DEBUG
            /*
             * Cross-checking MaxBitLen provided by the DSDL compiler.
             * This check shall never be performed in user code because MaxBitLen value
             * actually depends on the nested types, thus it is not invariant.
             */
            ::uavcan::StaticAssert<32 == MaxBitLen>::check();
    #endif
        }

        bool operator==(ParameterType rhs) const;
        bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

        /**
         * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
         * floating point fields at any depth.
         */
        bool isClose(ParameterType rhs) const;

        static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

        static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    };

    template <int _tmpl>
    struct Response_
    {
        typedef const Response_<_tmpl>& ParameterType;
        typedef Response_<_tmpl>& ReferenceType;

        struct ConstantTypes
        {
        };

        struct FieldTypes
        {
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > option;
            typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > MSG_ID;
            typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > rate;
        };

        enum
        {
            MinBitLen
                = FieldTypes::option::MinBitLen
                + FieldTypes::MSG_ID::MinBitLen
                + FieldTypes::rate::MinBitLen
        };

        enum
        {
            MaxBitLen
                = FieldTypes::option::MaxBitLen
                + FieldTypes::MSG_ID::MaxBitLen
                + FieldTypes::rate::MaxBitLen
        };

        // Constants

        // Fields
        typename ::uavcan::StorageType< typename FieldTypes::option >::Type option;
        typename ::uavcan::StorageType< typename FieldTypes::MSG_ID >::Type MSG_ID;
        typename ::uavcan::StorageType< typename FieldTypes::rate >::Type rate;

        Response_()
            : option()
            , MSG_ID()
            , rate()
        {
            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

    #if UAVCAN_DEBUG
            /*
             * Cross-checking MaxBitLen provided by the DSDL compiler.
             * This check shall never be performed in user code because MaxBitLen value
             * actually depends on the nested types, thus it is not invariant.
             */
            ::uavcan::StaticAssert<32 == MaxBitLen>::check();
    #endif
        }

        bool operator==(ParameterType rhs) const;
        bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

        /**
         * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
         * floating point fields at any depth.
         */
        bool isClose(ParameterType rhs) const;

        static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

        static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                          ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    };

    typedef Request_<0> Request;
    typedef Response_<0> Response;

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindService };
    enum { DefaultDataTypeID = 214 };

    static const char* getDataTypeFullName()
    {
        return "com.hobbywing.esc.SetReportingFrequency";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

private:
    SetReportingFrequency_(); // Don't create objects of this type. Use Request/Response instead.
};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool SetReportingFrequency_::Request_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        option == rhs.option &&
        MSG_ID == rhs.MSG_ID &&
        rate == rhs.rate;
}

template <int _tmpl>
bool SetReportingFrequency_::Request_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(option, rhs.option) &&
        ::uavcan::areClose(MSG_ID, rhs.MSG_ID) &&
        ::uavcan::areClose(rate, rhs.rate);
}

template <int _tmpl>
int SetReportingFrequency_::Request_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::option::encode(self.option, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::MSG_ID::encode(self.MSG_ID, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rate::encode(self.rate, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int SetReportingFrequency_::Request_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::option::decode(self.option, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::MSG_ID::decode(self.MSG_ID, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rate::decode(self.rate, codec,  tao_mode);
    return res;
}

template <int _tmpl>
bool SetReportingFrequency_::Response_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        option == rhs.option &&
        MSG_ID == rhs.MSG_ID &&
        rate == rhs.rate;
}

template <int _tmpl>
bool SetReportingFrequency_::Response_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(option, rhs.option) &&
        ::uavcan::areClose(MSG_ID, rhs.MSG_ID) &&
        ::uavcan::areClose(rate, rhs.rate);
}

template <int _tmpl>
int SetReportingFrequency_::Response_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::option::encode(self.option, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::MSG_ID::encode(self.MSG_ID, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rate::encode(self.rate, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int SetReportingFrequency_::Response_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::option::decode(self.option, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::MSG_ID::decode(self.MSG_ID, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rate::decode(self.rate, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
inline ::uavcan::DataTypeSignature SetReportingFrequency_::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x1FD0404420983DEBULL);

    Request::FieldTypes::option::extendDataTypeSignature(signature);
    Request::FieldTypes::MSG_ID::extendDataTypeSignature(signature);
    Request::FieldTypes::rate::extendDataTypeSignature(signature);

    Response::FieldTypes::option::extendDataTypeSignature(signature);
    Response::FieldTypes::MSG_ID::extendDataTypeSignature(signature);
    Response::FieldTypes::rate::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

template <int _tmpl>
const typename ::uavcan::StorageType< typename SetReportingFrequency_::Request_<_tmpl>::ConstantTypes::OPTION_READ >::Type
    SetReportingFrequency_::Request_<_tmpl>::OPTION_READ = 0U; // 0

template <int _tmpl>
const typename ::uavcan::StorageType< typename SetReportingFrequency_::Request_<_tmpl>::ConstantTypes::OPTION_WRITE >::Type
    SetReportingFrequency_::Request_<_tmpl>::OPTION_WRITE = 1U; // 1

template <int _tmpl>
const typename ::uavcan::StorageType< typename SetReportingFrequency_::Request_<_tmpl>::ConstantTypes::RATE_500HZ >::Type
    SetReportingFrequency_::Request_<_tmpl>::RATE_500HZ = 1U; // 1

template <int _tmpl>
const typename ::uavcan::StorageType< typename SetReportingFrequency_::Request_<_tmpl>::ConstantTypes::RATE_250HZ >::Type
    SetReportingFrequency_::Request_<_tmpl>::RATE_250HZ = 2U; // 2

template <int _tmpl>
const typename ::uavcan::StorageType< typename SetReportingFrequency_::Request_<_tmpl>::ConstantTypes::RATE_200HZ >::Type
    SetReportingFrequency_::Request_<_tmpl>::RATE_200HZ = 3U; // 3

template <int _tmpl>
const typename ::uavcan::StorageType< typename SetReportingFrequency_::Request_<_tmpl>::ConstantTypes::RATE_100HZ >::Type
    SetReportingFrequency_::Request_<_tmpl>::RATE_100HZ = 4U; // 4

template <int _tmpl>
const typename ::uavcan::StorageType< typename SetReportingFrequency_::Request_<_tmpl>::ConstantTypes::RATE_50HZ >::Type
    SetReportingFrequency_::Request_<_tmpl>::RATE_50HZ = 5U; // 5

template <int _tmpl>
const typename ::uavcan::StorageType< typename SetReportingFrequency_::Request_<_tmpl>::ConstantTypes::RATE_20HZ >::Type
    SetReportingFrequency_::Request_<_tmpl>::RATE_20HZ = 6U; // 6

template <int _tmpl>
const typename ::uavcan::StorageType< typename SetReportingFrequency_::Request_<_tmpl>::ConstantTypes::RATE_10HZ >::Type
    SetReportingFrequency_::Request_<_tmpl>::RATE_10HZ = 7U; // 7

template <int _tmpl>
const typename ::uavcan::StorageType< typename SetReportingFrequency_::Request_<_tmpl>::ConstantTypes::RATE_1HZ >::Type
    SetReportingFrequency_::Request_<_tmpl>::RATE_1HZ = 8U; // 8

template <int _tmpl>
const typename ::uavcan::StorageType< typename SetReportingFrequency_::Request_<_tmpl>::ConstantTypes::RATE_0HZ >::Type
    SetReportingFrequency_::Request_<_tmpl>::RATE_0HZ = 9U; // 9

/*
 * Final typedef
 */
typedef SetReportingFrequency_ SetReportingFrequency;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::com::hobbywing::esc::SetReportingFrequency > _uavcan_gdtr_registrator_SetReportingFrequency;

}

} // Namespace esc
} // Namespace hobbywing
} // Namespace com

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::com::hobbywing::esc::SetReportingFrequency::Request >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::com::hobbywing::esc::SetReportingFrequency::Request::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::com::hobbywing::esc::SetReportingFrequency::Request >::stream(Stream& s, ::com::hobbywing::esc::SetReportingFrequency::Request::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "option: ";
    YamlStreamer< ::com::hobbywing::esc::SetReportingFrequency::Request::FieldTypes::option >::stream(s, obj.option, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "MSG_ID: ";
    YamlStreamer< ::com::hobbywing::esc::SetReportingFrequency::Request::FieldTypes::MSG_ID >::stream(s, obj.MSG_ID, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rate: ";
    YamlStreamer< ::com::hobbywing::esc::SetReportingFrequency::Request::FieldTypes::rate >::stream(s, obj.rate, level + 1);
}

template <>
class UAVCAN_EXPORT YamlStreamer< ::com::hobbywing::esc::SetReportingFrequency::Response >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::com::hobbywing::esc::SetReportingFrequency::Response::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::com::hobbywing::esc::SetReportingFrequency::Response >::stream(Stream& s, ::com::hobbywing::esc::SetReportingFrequency::Response::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "option: ";
    YamlStreamer< ::com::hobbywing::esc::SetReportingFrequency::Response::FieldTypes::option >::stream(s, obj.option, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "MSG_ID: ";
    YamlStreamer< ::com::hobbywing::esc::SetReportingFrequency::Response::FieldTypes::MSG_ID >::stream(s, obj.MSG_ID, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rate: ";
    YamlStreamer< ::com::hobbywing::esc::SetReportingFrequency::Response::FieldTypes::rate >::stream(s, obj.rate, level + 1);
}

}

namespace com
{
namespace hobbywing
{
namespace esc
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::com::hobbywing::esc::SetReportingFrequency::Request::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::com::hobbywing::esc::SetReportingFrequency::Request >::stream(s, obj, 0);
    return s;
}

template <typename Stream>
inline Stream& operator<<(Stream& s, ::com::hobbywing::esc::SetReportingFrequency::Response::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::com::hobbywing::esc::SetReportingFrequency::Response >::stream(s, obj, 0);
    return s;
}

} // Namespace esc
} // Namespace hobbywing
} // Namespace com

#endif // COM_HOBBYWING_ESC_SETREPORTINGFREQUENCY_HPP_INCLUDED