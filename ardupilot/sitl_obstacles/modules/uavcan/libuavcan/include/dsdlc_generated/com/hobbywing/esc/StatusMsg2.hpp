/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/user/cyberimmune-systems-autonomous-delivery-drone-with-kos-contest/modules/DroneCAN/DSDL/com/hobbywing/esc/20051.StatusMsg2.uavcan
 */

#ifndef COM_HOBBYWING_ESC_STATUSMSG2_HPP_INCLUDED
#define COM_HOBBYWING_ESC_STATUSMSG2_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
OVERRIDE_SIGNATURE 0x1675da01c3b91297

int16 input_voltage # 0.1V
int16 current # 0.1A
uint8 temperature # degC
******************************************************************************/

/********************* DSDL signature source definition ***********************
com.hobbywing.esc.StatusMsg2
saturated int16 input_voltage
saturated int16 current
saturated uint8 temperature
******************************************************************************/

#undef input_voltage
#undef current
#undef temperature

namespace com
{
namespace hobbywing
{
namespace esc
{

template <int _tmpl>
struct UAVCAN_EXPORT StatusMsg2_
{
    typedef const StatusMsg2_<_tmpl>& ParameterType;
    typedef StatusMsg2_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > input_voltage;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > current;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > temperature;
    };

    enum
    {
        MinBitLen
            = FieldTypes::input_voltage::MinBitLen
            + FieldTypes::current::MinBitLen
            + FieldTypes::temperature::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::input_voltage::MaxBitLen
            + FieldTypes::current::MaxBitLen
            + FieldTypes::temperature::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::input_voltage >::Type input_voltage;
    typename ::uavcan::StorageType< typename FieldTypes::current >::Type current;
    typename ::uavcan::StorageType< typename FieldTypes::temperature >::Type temperature;

    StatusMsg2_()
        : input_voltage()
        , current()
        , temperature()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<40 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 20051 };

    static const char* getDataTypeFullName()
    {
        return "com.hobbywing.esc.StatusMsg2";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool StatusMsg2_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        input_voltage == rhs.input_voltage &&
        current == rhs.current &&
        temperature == rhs.temperature;
}

template <int _tmpl>
bool StatusMsg2_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(input_voltage, rhs.input_voltage) &&
        ::uavcan::areClose(current, rhs.current) &&
        ::uavcan::areClose(temperature, rhs.temperature);
}

template <int _tmpl>
int StatusMsg2_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::input_voltage::encode(self.input_voltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::current::encode(self.current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::temperature::encode(self.temperature, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int StatusMsg2_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::input_voltage::decode(self.input_voltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::current::decode(self.current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::temperature::decode(self.temperature, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature StatusMsg2_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x1675DA01C3B91297ULL);

    FieldTypes::input_voltage::extendDataTypeSignature(signature);
    FieldTypes::current::extendDataTypeSignature(signature);
    FieldTypes::temperature::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef StatusMsg2_<0> StatusMsg2;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::com::hobbywing::esc::StatusMsg2 > _uavcan_gdtr_registrator_StatusMsg2;

}

} // Namespace esc
} // Namespace hobbywing
} // Namespace com

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::com::hobbywing::esc::StatusMsg2 >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::com::hobbywing::esc::StatusMsg2::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::com::hobbywing::esc::StatusMsg2 >::stream(Stream& s, ::com::hobbywing::esc::StatusMsg2::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "input_voltage: ";
    YamlStreamer< ::com::hobbywing::esc::StatusMsg2::FieldTypes::input_voltage >::stream(s, obj.input_voltage, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "current: ";
    YamlStreamer< ::com::hobbywing::esc::StatusMsg2::FieldTypes::current >::stream(s, obj.current, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "temperature: ";
    YamlStreamer< ::com::hobbywing::esc::StatusMsg2::FieldTypes::temperature >::stream(s, obj.temperature, level + 1);
}

}

namespace com
{
namespace hobbywing
{
namespace esc
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::com::hobbywing::esc::StatusMsg2::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::com::hobbywing::esc::StatusMsg2 >::stream(s, obj, 0);
    return s;
}

} // Namespace esc
} // Namespace hobbywing
} // Namespace com

#endif // COM_HOBBYWING_ESC_STATUSMSG2_HPP_INCLUDED