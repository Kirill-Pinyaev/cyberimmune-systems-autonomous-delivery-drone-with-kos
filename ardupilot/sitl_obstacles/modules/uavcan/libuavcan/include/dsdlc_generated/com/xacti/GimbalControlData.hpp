/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/user/cyberimmune-systems-autonomous-delivery-drone-with-kos-contest/modules/DroneCAN/DSDL/com/xacti/20554.GimbalControlData.uavcan
 */

#ifndef COM_XACTI_GIMBALCONTROLDATA_HPP_INCLUDED
#define COM_XACTI_GIMBALCONTROLDATA_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Xacti camera gimbal control
#
#

# signature from original file location
OVERRIDE_SIGNATURE 0x3B058FA5B150C5BE

#
# pitch and yaw command type
# 0: unused
# 2: angle control
# 3: angular velocity control
#
uint8 pitch_cmd_type
uint8 yaw_cmd_type

#
# pitch command value
# if cmd_type is 0 these values are ignored
# if cmd_type is 2 (angle control) scale is centi-degrees. Range is -115 deg (e.g. -11500) to 45 (e.g. 4500). Positive values point gimbal upwards
# if cmd_type is 3 (angular velocity control), scale is centi-degrees/sec
# values are unsigned but gimbal will cast to signed
#
uint16 pitch_cmd_value

#
# yaw command value
# if cmd_type is 0 these values are ignored
# if cmd_type is 2 (angle control) scale is centi-degrees. Yaw range is -85 deg (e.g. -8500) to +85 deg (e.g. +8500).  Positive is clockwise
# if cmd_type is 3 (angular velocity control), scale is centi-degrees/sec
# values are unsigned but gimbal will cast to signed
#
uint16 yaw_cmd_value
******************************************************************************/

/********************* DSDL signature source definition ***********************
com.xacti.GimbalControlData
saturated uint8 pitch_cmd_type
saturated uint8 yaw_cmd_type
saturated uint16 pitch_cmd_value
saturated uint16 yaw_cmd_value
******************************************************************************/

#undef pitch_cmd_type
#undef yaw_cmd_type
#undef pitch_cmd_value
#undef yaw_cmd_value

namespace com
{
namespace xacti
{

template <int _tmpl>
struct UAVCAN_EXPORT GimbalControlData_
{
    typedef const GimbalControlData_<_tmpl>& ParameterType;
    typedef GimbalControlData_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > pitch_cmd_type;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > yaw_cmd_type;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > pitch_cmd_value;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > yaw_cmd_value;
    };

    enum
    {
        MinBitLen
            = FieldTypes::pitch_cmd_type::MinBitLen
            + FieldTypes::yaw_cmd_type::MinBitLen
            + FieldTypes::pitch_cmd_value::MinBitLen
            + FieldTypes::yaw_cmd_value::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::pitch_cmd_type::MaxBitLen
            + FieldTypes::yaw_cmd_type::MaxBitLen
            + FieldTypes::pitch_cmd_value::MaxBitLen
            + FieldTypes::yaw_cmd_value::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::pitch_cmd_type >::Type pitch_cmd_type;
    typename ::uavcan::StorageType< typename FieldTypes::yaw_cmd_type >::Type yaw_cmd_type;
    typename ::uavcan::StorageType< typename FieldTypes::pitch_cmd_value >::Type pitch_cmd_value;
    typename ::uavcan::StorageType< typename FieldTypes::yaw_cmd_value >::Type yaw_cmd_value;

    GimbalControlData_()
        : pitch_cmd_type()
        , yaw_cmd_type()
        , pitch_cmd_value()
        , yaw_cmd_value()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<48 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 20554 };

    static const char* getDataTypeFullName()
    {
        return "com.xacti.GimbalControlData";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool GimbalControlData_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        pitch_cmd_type == rhs.pitch_cmd_type &&
        yaw_cmd_type == rhs.yaw_cmd_type &&
        pitch_cmd_value == rhs.pitch_cmd_value &&
        yaw_cmd_value == rhs.yaw_cmd_value;
}

template <int _tmpl>
bool GimbalControlData_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(pitch_cmd_type, rhs.pitch_cmd_type) &&
        ::uavcan::areClose(yaw_cmd_type, rhs.yaw_cmd_type) &&
        ::uavcan::areClose(pitch_cmd_value, rhs.pitch_cmd_value) &&
        ::uavcan::areClose(yaw_cmd_value, rhs.yaw_cmd_value);
}

template <int _tmpl>
int GimbalControlData_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::pitch_cmd_type::encode(self.pitch_cmd_type, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::yaw_cmd_type::encode(self.yaw_cmd_type, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::pitch_cmd_value::encode(self.pitch_cmd_value, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::yaw_cmd_value::encode(self.yaw_cmd_value, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int GimbalControlData_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::pitch_cmd_type::decode(self.pitch_cmd_type, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::yaw_cmd_type::decode(self.yaw_cmd_type, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::pitch_cmd_value::decode(self.pitch_cmd_value, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::yaw_cmd_value::decode(self.yaw_cmd_value, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature GimbalControlData_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x3B058FA5B150C5BEULL);

    FieldTypes::pitch_cmd_type::extendDataTypeSignature(signature);
    FieldTypes::yaw_cmd_type::extendDataTypeSignature(signature);
    FieldTypes::pitch_cmd_value::extendDataTypeSignature(signature);
    FieldTypes::yaw_cmd_value::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef GimbalControlData_<0> GimbalControlData;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::com::xacti::GimbalControlData > _uavcan_gdtr_registrator_GimbalControlData;

}

} // Namespace xacti
} // Namespace com

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::com::xacti::GimbalControlData >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::com::xacti::GimbalControlData::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::com::xacti::GimbalControlData >::stream(Stream& s, ::com::xacti::GimbalControlData::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "pitch_cmd_type: ";
    YamlStreamer< ::com::xacti::GimbalControlData::FieldTypes::pitch_cmd_type >::stream(s, obj.pitch_cmd_type, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "yaw_cmd_type: ";
    YamlStreamer< ::com::xacti::GimbalControlData::FieldTypes::yaw_cmd_type >::stream(s, obj.yaw_cmd_type, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "pitch_cmd_value: ";
    YamlStreamer< ::com::xacti::GimbalControlData::FieldTypes::pitch_cmd_value >::stream(s, obj.pitch_cmd_value, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "yaw_cmd_value: ";
    YamlStreamer< ::com::xacti::GimbalControlData::FieldTypes::yaw_cmd_value >::stream(s, obj.yaw_cmd_value, level + 1);
}

}

namespace com
{
namespace xacti
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::com::xacti::GimbalControlData::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::com::xacti::GimbalControlData >::stream(s, obj, 0);
    return s;
}

} // Namespace xacti
} // Namespace com

#endif // COM_XACTI_GIMBALCONTROLDATA_HPP_INCLUDED