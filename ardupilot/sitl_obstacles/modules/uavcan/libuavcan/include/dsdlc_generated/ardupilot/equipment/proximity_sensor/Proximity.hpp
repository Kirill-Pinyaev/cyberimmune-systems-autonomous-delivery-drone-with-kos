/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/user/cyberimmune-systems-autonomous-delivery-drone-with-kos-contest/modules/DroneCAN/DSDL/ardupilot/equipment/proximity_sensor/21910.Proximity.uavcan
 */

#ifndef ARDUPILOT_EQUIPMENT_PROXIMITY_SENSOR_PROXIMITY_HPP_INCLUDED
#define ARDUPILOT_EQUIPMENT_PROXIMITY_SENSOR_PROXIMITY_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Proximity data
#
uint8 sensor_id                      # Sensor ID

uint3 READING_TYPE_NO_DATA   = 0     # Distance is unknown
uint3 READING_TYPE_NOT_CONNECTED = 1 # Distance field contains valid distance
uint3 READING_TYPE_GOOD   = 2        # Distance field contains valid reading for the sensor

uint3 reading_type                   # Sensor Status

uint5 flags                          # Reserved
uint5 FLAGS_NONE = 0

float16 yaw                          # Degrees in body frame
float16 pitch                        # Degrees in body frame
float16 distance                     # Meters
******************************************************************************/

/********************* DSDL signature source definition ***********************
ardupilot.equipment.proximity_sensor.Proximity
saturated uint8 sensor_id
saturated uint3 reading_type
saturated uint5 flags
saturated float16 yaw
saturated float16 pitch
saturated float16 distance
******************************************************************************/

#undef sensor_id
#undef reading_type
#undef flags
#undef yaw
#undef pitch
#undef distance
#undef READING_TYPE_NO_DATA
#undef READING_TYPE_NOT_CONNECTED
#undef READING_TYPE_GOOD
#undef FLAGS_NONE

namespace ardupilot
{
namespace equipment
{
namespace proximity_sensor
{

template <int _tmpl>
struct UAVCAN_EXPORT Proximity_
{
    typedef const Proximity_<_tmpl>& ParameterType;
    typedef Proximity_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
        typedef ::uavcan::IntegerSpec< 3, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > READING_TYPE_NO_DATA;
        typedef ::uavcan::IntegerSpec< 3, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > READING_TYPE_NOT_CONNECTED;
        typedef ::uavcan::IntegerSpec< 3, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > READING_TYPE_GOOD;
        typedef ::uavcan::IntegerSpec< 5, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > FLAGS_NONE;
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > sensor_id;
        typedef ::uavcan::IntegerSpec< 3, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > reading_type;
        typedef ::uavcan::IntegerSpec< 5, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > flags;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > yaw;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > pitch;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > distance;
    };

    enum
    {
        MinBitLen
            = FieldTypes::sensor_id::MinBitLen
            + FieldTypes::reading_type::MinBitLen
            + FieldTypes::flags::MinBitLen
            + FieldTypes::yaw::MinBitLen
            + FieldTypes::pitch::MinBitLen
            + FieldTypes::distance::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::sensor_id::MaxBitLen
            + FieldTypes::reading_type::MaxBitLen
            + FieldTypes::flags::MaxBitLen
            + FieldTypes::yaw::MaxBitLen
            + FieldTypes::pitch::MaxBitLen
            + FieldTypes::distance::MaxBitLen
    };

    // Constants
    static const typename ::uavcan::StorageType< typename ConstantTypes::READING_TYPE_NO_DATA >::Type READING_TYPE_NO_DATA; // 0
    static const typename ::uavcan::StorageType< typename ConstantTypes::READING_TYPE_NOT_CONNECTED >::Type READING_TYPE_NOT_CONNECTED; // 1
    static const typename ::uavcan::StorageType< typename ConstantTypes::READING_TYPE_GOOD >::Type READING_TYPE_GOOD; // 2
    static const typename ::uavcan::StorageType< typename ConstantTypes::FLAGS_NONE >::Type FLAGS_NONE; // 0

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::sensor_id >::Type sensor_id;
    typename ::uavcan::StorageType< typename FieldTypes::reading_type >::Type reading_type;
    typename ::uavcan::StorageType< typename FieldTypes::flags >::Type flags;
    typename ::uavcan::StorageType< typename FieldTypes::yaw >::Type yaw;
    typename ::uavcan::StorageType< typename FieldTypes::pitch >::Type pitch;
    typename ::uavcan::StorageType< typename FieldTypes::distance >::Type distance;

    Proximity_()
        : sensor_id()
        , reading_type()
        , flags()
        , yaw()
        , pitch()
        , distance()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<64 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 21910 };

    static const char* getDataTypeFullName()
    {
        return "ardupilot.equipment.proximity_sensor.Proximity";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool Proximity_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        sensor_id == rhs.sensor_id &&
        reading_type == rhs.reading_type &&
        flags == rhs.flags &&
        yaw == rhs.yaw &&
        pitch == rhs.pitch &&
        distance == rhs.distance;
}

template <int _tmpl>
bool Proximity_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(sensor_id, rhs.sensor_id) &&
        ::uavcan::areClose(reading_type, rhs.reading_type) &&
        ::uavcan::areClose(flags, rhs.flags) &&
        ::uavcan::areClose(yaw, rhs.yaw) &&
        ::uavcan::areClose(pitch, rhs.pitch) &&
        ::uavcan::areClose(distance, rhs.distance);
}

template <int _tmpl>
int Proximity_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::sensor_id::encode(self.sensor_id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::reading_type::encode(self.reading_type, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::flags::encode(self.flags, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::yaw::encode(self.yaw, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::pitch::encode(self.pitch, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::distance::encode(self.distance, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int Proximity_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::sensor_id::decode(self.sensor_id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::reading_type::decode(self.reading_type, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::flags::decode(self.flags, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::yaw::decode(self.yaw, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::pitch::decode(self.pitch, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::distance::decode(self.distance, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature Proximity_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x99DD3985FB3222CEULL);

    FieldTypes::sensor_id::extendDataTypeSignature(signature);
    FieldTypes::reading_type::extendDataTypeSignature(signature);
    FieldTypes::flags::extendDataTypeSignature(signature);
    FieldTypes::yaw::extendDataTypeSignature(signature);
    FieldTypes::pitch::extendDataTypeSignature(signature);
    FieldTypes::distance::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

template <int _tmpl>
const typename ::uavcan::StorageType< typename Proximity_<_tmpl>::ConstantTypes::READING_TYPE_NO_DATA >::Type
    Proximity_<_tmpl>::READING_TYPE_NO_DATA = 0U; // 0

template <int _tmpl>
const typename ::uavcan::StorageType< typename Proximity_<_tmpl>::ConstantTypes::READING_TYPE_NOT_CONNECTED >::Type
    Proximity_<_tmpl>::READING_TYPE_NOT_CONNECTED = 1U; // 1

template <int _tmpl>
const typename ::uavcan::StorageType< typename Proximity_<_tmpl>::ConstantTypes::READING_TYPE_GOOD >::Type
    Proximity_<_tmpl>::READING_TYPE_GOOD = 2U; // 2

template <int _tmpl>
const typename ::uavcan::StorageType< typename Proximity_<_tmpl>::ConstantTypes::FLAGS_NONE >::Type
    Proximity_<_tmpl>::FLAGS_NONE = 0U; // 0

/*
 * Final typedef
 */
typedef Proximity_<0> Proximity;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::ardupilot::equipment::proximity_sensor::Proximity > _uavcan_gdtr_registrator_Proximity;

}

} // Namespace proximity_sensor
} // Namespace equipment
} // Namespace ardupilot

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::ardupilot::equipment::proximity_sensor::Proximity >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::ardupilot::equipment::proximity_sensor::Proximity::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::ardupilot::equipment::proximity_sensor::Proximity >::stream(Stream& s, ::ardupilot::equipment::proximity_sensor::Proximity::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "sensor_id: ";
    YamlStreamer< ::ardupilot::equipment::proximity_sensor::Proximity::FieldTypes::sensor_id >::stream(s, obj.sensor_id, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "reading_type: ";
    YamlStreamer< ::ardupilot::equipment::proximity_sensor::Proximity::FieldTypes::reading_type >::stream(s, obj.reading_type, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "flags: ";
    YamlStreamer< ::ardupilot::equipment::proximity_sensor::Proximity::FieldTypes::flags >::stream(s, obj.flags, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "yaw: ";
    YamlStreamer< ::ardupilot::equipment::proximity_sensor::Proximity::FieldTypes::yaw >::stream(s, obj.yaw, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "pitch: ";
    YamlStreamer< ::ardupilot::equipment::proximity_sensor::Proximity::FieldTypes::pitch >::stream(s, obj.pitch, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "distance: ";
    YamlStreamer< ::ardupilot::equipment::proximity_sensor::Proximity::FieldTypes::distance >::stream(s, obj.distance, level + 1);
}

}

namespace ardupilot
{
namespace equipment
{
namespace proximity_sensor
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::ardupilot::equipment::proximity_sensor::Proximity::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::ardupilot::equipment::proximity_sensor::Proximity >::stream(s, obj, 0);
    return s;
}

} // Namespace proximity_sensor
} // Namespace equipment
} // Namespace ardupilot

#endif // ARDUPILOT_EQUIPMENT_PROXIMITY_SENSOR_PROXIMITY_HPP_INCLUDED