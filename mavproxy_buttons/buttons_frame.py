#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# 
# generated by wxGlade 1.0.4 on Wed Jul  9 18:24:39 2025
#
# MAVProxy buttons module

import wx
import wx.grid
from MAVProxy.modules.lib import mp_util
from MAVProxy.modules.lib import multiproc
from pymavlink import mavutil

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class ButtonsFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        self.gui_event_queue = multiproc.Queue()
        self.gui_event_queue_lock = multiproc.Lock()
        self.requires_redraw = False
 

        # begin wxGlade: ButtonsFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((400, 300))
        self.SetTitle("Buttons")
        button_size = wx.Size(130, 50)

        grid_sizer_1 = wx.GridSizer(3, 3, 0, 0)

        self.button_1 = wx.Button(self, wx.ID_ANY, "ARM", size=button_size)
        grid_sizer_1.Add(self.button_1, 0, 0, 0)

        self.button_2 = wx.Button(self, wx.ID_ANY, "Autonomous", size=button_size)
        grid_sizer_1.Add(self.button_2, 0, 0, 0)

        self.button_3 = wx.Button(self, wx.ID_ANY, "Mission START", size=button_size)
        grid_sizer_1.Add(self.button_3, 0, 0, 0)

        self.button_4 = wx.Button(self, wx.ID_ANY, "DISARM", size=button_size)
        grid_sizer_1.Add(self.button_4, 0, 0, 0)

        self.button_5 = wx.Button(self, wx.ID_ANY, "Stabilize", size=button_size)
        grid_sizer_1.Add(self.button_5, 0, 0, 0)

        self.button_6 = wx.Button(self, wx.ID_ANY, "LAND", size=button_size)
        grid_sizer_1.Add(self.button_6, 0, 0, 0)

        self.button_7 = wx.Button(self, wx.ID_ANY, "FORCE DISARM", size=button_size)
        grid_sizer_1.Add(self.button_7, 0, 0, 0)

        self.button_8 = wx.Button(self, wx.ID_ANY, "Guided", size=button_size)
        grid_sizer_1.Add(self.button_8, 0, 0, 0)

        # empty button
        self.button_9 = wx.Button(self, wx.ID_ANY, "", size=button_size)
        grid_sizer_1.Add(self.button_9, 0, 0, 0)

        self.SetSizer(grid_sizer_1)

        self.Layout()
        # end wxGlade

        self.Bind(wx.EVT_BUTTON, self.button_arm_logic, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.button_mode_auto_logic, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.button_mission_start_logic, self.button_3)

        self.Bind(wx.EVT_BUTTON, self.button_disarm_logic, self.button_4)
        self.Bind(wx.EVT_BUTTON, self.button_mode_stabilize_logic, self.button_5)
        self.Bind(wx.EVT_BUTTON, self.button_mode_land_logic, self.button_6)

        self.Bind(wx.EVT_BUTTON, self.button_force_disarm_logic, self.button_7)
        self.Bind(wx.EVT_BUTTON, self.button_mode_guided_logic, self.button_8)

        self.timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.time_to_process_gui_events, self.timer)
        self.timer.Start(200)

    # https://mavlink.io/en/messages/common.html#MAV_CMD_COMPONENT_ARM_DISARM
    # also short "arm throttle" might be used
    def button_arm_logic(self, event):
        cmd = "long {} 1".format(mavutil.mavlink.MAV_CMD_COMPONENT_ARM_DISARM)
        self.mpstate.functions.process_stdin(cmd)

    # https://mavlink.io/en/messages/common.html#MAV_CMD_COMPONENT_ARM_DISARM
    def button_disarm_logic(self, event):
        cmd = "long {} 0".format(mavutil.mavlink.MAV_CMD_COMPONENT_ARM_DISARM)
        self.mpstate.functions.process_stdin(cmd)

    # https://mavlink.io/en/messages/common.html#MAV_CMD_COMPONENT_ARM_DISARM
    def button_force_disarm_logic(self, event):
        cmd = "long {} 0 21196".format(mavutil.mavlink.MAV_CMD_COMPONENT_ARM_DISARM)
        self.mpstate.functions.process_stdin(cmd)

    # https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_MODE
    # https://mavlink.io/en/messages/common.html#MAV_MODE_FLAG
    def button_mode_auto_logic(self, event):
        cmd = "mode auto"
        self.mpstate.functions.process_stdin(cmd)

    # https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_MODE
    # https://mavlink.io/en/messages/common.html#MAV_MODE_FLAG
    def button_mode_stabilize_logic(self, event):
        cmd = "mode stabilize"
        self.mpstate.functions.process_stdin(cmd)

    # https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_MODE
    # https://mavlink.io/en/messages/common.html#MAV_MODE_FLAG
    def button_mode_guided_logic(self, event):
        cmd = "mode guided"
        self.mpstate.functions.process_stdin(cmd)

    # https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_MODE
    # https://mavlink.io/en/messages/common.html#MAV_MODE_FLAG
    def button_mode_land_logic(self, event):
        cmd = "mode land"
        self.mpstate.functions.process_stdin(cmd)

    # https://mavlink.io/en/messages/common.html#MAV_CMD_MISSION_START
    def button_mission_start_logic(self, event):
        cmd = "long {}".format(mavutil.mavlink.MAV_CMD_MISSION_START)
        self.mpstate.functions.process_stdin(cmd)

    def set_gui_event_queue(self, q):
        self.gui_event_queue = q

    def set_gui_event_queue_lock(self, l):
        self.gui_event_queue_lock = l

    def time_to_process_gui_events(self, evt):
        event_processed = False
        while not self.gui_event_queue.empty():
            event_processed = True
            try:
                event = self.gui_event_queue.get(block=False)
                self.process_gui_event(event)
            except Exception as e:
                pass

        if self.requires_redraw and ((time.time() - self.last_grid_update) > 0.1):
            self.key_redraw()
            self.requires_redraw = False

        if (event_processed):
            # redraw window to apply changes
            self.Refresh()
            self.Update()


if __name__ == "__main__":
    app = wx.App(False)
    app.MainLoop()
